classdef Mocap_Calibration_Process_new_191001 < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                      matlab.ui.Figure
        DataPathButton                matlab.ui.control.Button
        EditField                     matlab.ui.control.EditField
        UITable                       matlab.ui.control.Table
        LoadDataButton                matlab.ui.control.Button
        DataLoadedLampLabel           matlab.ui.control.Label
        DataLoadedLamp                matlab.ui.control.Lamp
        StartCalibrateButton          matlab.ui.control.Button
        ReadytoCalibrateLampLabel     matlab.ui.control.Label
        ReadytoCalibrateLamp          matlab.ui.control.Lamp
        ExportParameterButton         matlab.ui.control.Button
        ReadytoExportLampLabel        matlab.ui.control.Label
        ReadytoExportLamp             matlab.ui.control.Lamp
        SwitchLabel                   matlab.ui.control.Label
        Switch                        matlab.ui.control.Switch
        OffsetLoadedLampLabel         matlab.ui.control.Label
        OffsetLoadedLamp              matlab.ui.control.Lamp
        LoadOffsetButton              matlab.ui.control.Button
        StatusBarEditFieldLabel       matlab.ui.control.Label
        StatusBarEditField            matlab.ui.control.EditField
        ofiterationEditFieldLabel     matlab.ui.control.Label
        ofiterationEditField          matlab.ui.control.NumericEditField
        OffsetPathButton              matlab.ui.control.Button
        EditField_2                   matlab.ui.control.EditField
        LambdaEditFieldLabel          matlab.ui.control.Label
        LambdaEditField               matlab.ui.control.NumericEditField
        AutoExportCheckBox            matlab.ui.control.CheckBox
        OutputFileNameEditFieldLabel  matlab.ui.control.Label
        OutputFileNameEditField       matlab.ui.control.EditField
    end


    properties (Access = public)
        dataPath;
        offsetPath;
        off_TH1=0;
        off_TH2=0;
        off_TH3=0;
        off_TH4=0;

        off_TH1_MI=0;
        off_TH2_MI=0;
        off_TH3_MI=0;
        off_TH4_MI=0;
        
        off_TH1_TH=0;
        off_TH2_TH=0;
        off_TH3_TH=0;
        off_TH4_TH=0;
        current_mode = 0; % 0 = left, 1 = right
        data;
        iteration = 5;
        DH_off;
        DH_init;
        lambda = 5000;
        auto_export = false;
        export_every_it = false;
        outputFileName = 'DH_parameters';
    end

    methods (Access = private)
    
        function results = calibrate_mocap_left(app)
            app.StatusBarEditField.Value = 'Starting Left Mocap Calibration';
            pause(0.3);
            data3 = app.data;
            alpha=0;
            beta=0;
            gamma=1;
            halfpi = pi / 2;
            
            l1=24.24;
            l2=56.03;
            l3=12.94;
            l4=47.5;
            l5=18.5;
            l6=23.5;
            l7=10.37;
            l8=16.5;
            
            l1_TH=24.24;
            l2_TH=56.03;
            l3_TH=12.94;
            l4_TH=57.5;
            l5_TH=18.5;
            l6_TH=26.5;
            l7_TH=-10.37;
            l8_TH=16.5;
            
            l1_MI=24.24;
            l2_MI=56.03;
            l3_MI=12.94;
            l4_MI=47.5;
            l5_MI=18.5;
            l6_MI=23.5;
            l7_MI=10.37;
            l8_MI=16.5;
            
            T1=4;
            T2=5;
            I1=2;
            I2=3;
            M1=1;
            M2=0;
            
            lambda=app.lambda;
            syms A0_TH B0_TH C0_TH D0_TH E0_TH F0_TH A0_MI B0_MI C0_MI D0_MI E0_MI F0_MI A1 B1 C1 D1 A2 B2 C2 D2 A3 B3 C3 D3 A4 B4 C4 D4 A5 B5 C5 D5 A6 B6 C6 D6 A7 B7 C7 D7 A8 B8 C8 D8 A1_TH B1_TH C1_TH D1_TH A2_TH B2_TH C2_TH D2_TH A3_TH B3_TH C3_TH D3_TH A4_TH B4_TH C4_TH D4_TH A5_TH B5_TH C5_TH D5_TH A6_TH B6_TH C6_TH D6_TH A7_TH B7_TH C7_TH D7_TH A8_TH B8_TH C8_TH D8_TH A1_MI B1_MI C1_MI D1_MI A2_MI B2_MI C2_MI D2_MI A3_MI B3_MI C3_MI D3_MI A4_MI B4_MI C4_MI D4_MI A5_MI B5_MI C5_MI D5_MI A6_MI B6_MI C6_MI D6_MI A7_MI B7_MI C7_MI D7_MI A8_MI B8_MI C8_MI D8_MI


            Origin=[1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1];%% initial values
            Origin_TH=Origin*transl(-88.75,-29.04,24.35)*trotz(24*pi/180)*trotx(75*pi/180)*troty(-54*pi/180)*trotz(45*pi/180);%% initial values
            Origin_THParam=[-88.75 -29.04 24.35 asin(-Origin_TH(2,3)/cos(asin(Origin_TH(1,3)))) asin(Origin_TH(1,3)) asin(-Origin_TH(1,2)/cos(asin(Origin_TH(1,3))))];
            Origin_MI=Origin*transl(0,0,-19);%% initial values
            Origin_MIParam=[0 0 -19 0 0 0];
            
            q_double=[0 0 0 -halfpi 0 l1 halfpi 0 0 0 l4 0 0 0 -halfpi l6 0]; %% initial values
            q_TH_double=[0 0 0 -halfpi 0 l1_TH halfpi 0 0 0 l4_TH 0 0 0 -halfpi l6_TH 0 Origin_THParam(1) Origin_THParam(2) Origin_THParam(3) Origin_THParam(4) Origin_THParam(5) Origin_THParam(6)]; %% initial values
            q_MI_double=[0 0 0 -halfpi 0 l1_MI halfpi 0 0 0 l4_MI 0 0 0 -halfpi l6_MI 0 Origin_MIParam(1) Origin_MIParam(2) Origin_MIParam(3) Origin_MIParam(4) Origin_MIParam(5) Origin_MIParam(6)]; %% initial values
            
            DHinit=[[q_double';0;0;0;0;0;0] q_TH_double' q_MI_double'];
            app.DH_init = DHinit;
            off_TH1=app.off_TH1;
            off_TH2=app.off_TH2;
            off_TH3=app.off_TH3;
            off_TH4=app.off_TH4;
            
            off_TH1_MI= app.off_TH1_MI;
            off_TH2_MI= app.off_TH2_MI;
            off_TH3_MI= app.off_TH3_MI;
            off_TH4_MI= app.off_TH4_MI;
            
            off_TH1_TH= app.off_TH1_TH;
            off_TH2_TH= app.off_TH2_TH;
            off_TH3_TH= app.off_TH3_TH;
            off_TH4_TH= app.off_TH4_TH;
            
            qRef=[A1 B1 C1 D1 A2 C2 D2 A3 D4 A5 C5 D5 A6 A7 B7 C7 D7]';
            qRef_TH=[A1_TH B1_TH C1_TH D1_TH A2_TH C2_TH D2_TH A3_TH D4_TH A5_TH C5_TH D5_TH A6_TH A7_TH B7_TH C7_TH D7_TH A0_TH B0_TH C0_TH D0_TH E0_TH F0_TH]';
            qRef_MI=[A1_MI B1_MI C1_MI D1_MI A2_MI C2_MI D2_MI A3_MI D4_MI A5_MI C5_MI D5_MI A6_MI A7_MI B7_MI C7_MI D7_MI A0_MI B0_MI C0_MI D0_MI E0_MI F0_MI]';
            
            DHRef = [A1 B1 C1 D1; A2 B2 C2 D2; A3 B3 C3 D3; A4 B4 C4 D4; A5 B5 C5 D5; A6 B6 C6 D6; A7 B7 C7 D7; A8 B8 C8 D8];
            
            R01=transl(0,0,DHRef(1,1))*[cos(DHRef(1,2)) -sin(DHRef(1,2)) 0 0; sin(DHRef(1,2)) cos(DHRef(1,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(1,3),0,0)*[1 0 0 0; 0 cos(DHRef(1,4)) -sin(DHRef(1,4)) 0; 0 sin(DHRef(1,4)) cos(DHRef(1,4)) 0; 0 0 0 1];
            R12=transl(0,0,DHRef(2,1))*[cos(DHRef(2,2)) -sin(DHRef(2,2)) 0 0; sin(DHRef(2,2)) cos(DHRef(2,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(2,3),0,0)*[1 0 0 0; 0 cos(DHRef(2,4)) -sin(DHRef(2,4)) 0; 0 sin(DHRef(2,4)) cos(DHRef(2,4)) 0; 0 0 0 1];
            R23=transl(0,0,DHRef(3,1))*[cos(DHRef(3,2)) -sin(DHRef(3,2)) 0 0; sin(DHRef(3,2)) cos(DHRef(3,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(3,3),0,0)*[1 0 0 0; 0 cos(DHRef(3,4)) -sin(DHRef(3,4)) 0; 0 sin(DHRef(3,4)) cos(DHRef(3,4)) 0; 0 0 0 1];
            R34=transl(0,0,DHRef(4,1))*[cos(DHRef(4,2)) -sin(DHRef(4,2)) 0 0; sin(DHRef(4,2)) cos(DHRef(4,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(4,3),0,0)*[1 0 0 0; 0 cos(DHRef(4,4)) -sin(DHRef(4,4)) 0; 0 sin(DHRef(4,4)) cos(DHRef(4,4)) 0; 0 0 0 1];
            R45=transl(0,0,DHRef(5,1))*[cos(DHRef(5,2)) -sin(DHRef(5,2)) 0 0; sin(DHRef(5,2)) cos(DHRef(5,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(5,3),0,0)*[1 0 0 0; 0 cos(DHRef(5,4)) -sin(DHRef(5,4)) 0; 0 sin(DHRef(5,4)) cos(DHRef(5,4)) 0; 0 0 0 1];
            R56=transl(0,0,DHRef(6,1))*[cos(DHRef(6,2)) -sin(DHRef(6,2)) 0 0; sin(DHRef(6,2)) cos(DHRef(6,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(6,3),0,0)*[1 0 0 0; 0 cos(DHRef(6,4)) -sin(DHRef(6,4)) 0; 0 sin(DHRef(6,4)) cos(DHRef(6,4)) 0; 0 0 0 1];
            R67=transl(0,0,DHRef(7,1))*[cos(DHRef(7,2)) -sin(DHRef(7,2)) 0 0; sin(DHRef(7,2)) cos(DHRef(7,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(7,3),0,0)*[1 0 0 0; 0 cos(DHRef(7,4)) -sin(DHRef(7,4)) 0; 0 sin(DHRef(7,4)) cos(DHRef(7,4)) 0; 0 0 0 1];
            R78=transl(0,0,DHRef(8,1))*[cos(DHRef(8,2)) -sin(DHRef(8,2)) 0 0; sin(DHRef(8,2)) cos(DHRef(8,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(8,3),0,0)*[1 0 0 0; 0 cos(DHRef(8,4)) -sin(DHRef(8,4)) 0; 0 sin(DHRef(8,4)) cos(DHRef(8,4)) 0; 0 0 0 1];
            
            OriginRef=eye(4);
            
            R7=OriginRef*R01*R12*R23*R34*R45*R56*R67*R78;
            Joint7Ref=[R7(1,4); R7(2,4); R7(3,4)];
            
            % ccode(Joint7Ref,'file','Joint7Ref2.txt');
            % 'Joint7Ref written'
            
            JacobianMatRef = [diff(Joint7Ref(1),A1) diff(Joint7Ref(1),B1) diff(Joint7Ref(1),C1) diff(Joint7Ref(1),D1) diff(Joint7Ref(1),A2) diff(Joint7Ref(1),C2) diff(Joint7Ref(1),D2) diff(Joint7Ref(1),A3) diff(Joint7Ref(1),D4) diff(Joint7Ref(1),A5) diff(Joint7Ref(1),C5) diff(Joint7Ref(1),D5) diff(Joint7Ref(1),A6) diff(Joint7Ref(1),A7) diff(Joint7Ref(1),B7) diff(Joint7Ref(1),C7) diff(Joint7Ref(1),D7); 
                diff(Joint7Ref(2),A1) diff(Joint7Ref(2),B1) diff(Joint7Ref(2),C1) diff(Joint7Ref(2),D1) diff(Joint7Ref(2),A2) diff(Joint7Ref(2),C2) diff(Joint7Ref(2),D2) diff(Joint7Ref(2),A3) diff(Joint7Ref(2),D4) diff(Joint7Ref(2),A5) diff(Joint7Ref(2),C5) diff(Joint7Ref(2),D5) diff(Joint7Ref(2),A6) diff(Joint7Ref(2),A7) diff(Joint7Ref(2),B7) diff(Joint7Ref(2),C7) diff(Joint7Ref(2),D7); 
                diff(Joint7Ref(3),A1) diff(Joint7Ref(3),B1) diff(Joint7Ref(3),C1) diff(Joint7Ref(3),D1) diff(Joint7Ref(3),A2) diff(Joint7Ref(3),C2) diff(Joint7Ref(3),D2) diff(Joint7Ref(3),A3) diff(Joint7Ref(3),D4) diff(Joint7Ref(3),A5) diff(Joint7Ref(3),C5) diff(Joint7Ref(3),D5) diff(Joint7Ref(3),A6) diff(Joint7Ref(3),A7) diff(Joint7Ref(3),B7) diff(Joint7Ref(3),C7) diff(Joint7Ref(3),D7)];
            
            % ccode(JacobianMatRef,'file','JacobianMatRef2.txt');
            % 'JacobianMatRef written'
            
            DH_TH=[A1_TH B1_TH C1_TH D1_TH; A2_TH B2_TH C2_TH D2_TH; A3_TH B3_TH C3_TH D3_TH; A4_TH B4_TH C4_TH D4_TH; A5_TH B5_TH C5_TH D5_TH; A6_TH B6_TH C6_TH D6_TH; A7_TH B7_TH C7_TH D7_TH; A8_TH B8_TH C8_TH D8_TH];
            
            R01_TH=transl(0,0,DH_TH(1,1))*[cos(DH_TH(1,2)) -sin(DH_TH(1,2)) 0 0; sin(DH_TH(1,2)) cos(DH_TH(1,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(1,3),0,0)*[1 0 0 0; 0 cos(DH_TH(1,4)) -sin(DH_TH(1,4)) 0; 0 sin(DH_TH(1,4)) cos(DH_TH(1,4)) 0; 0 0 0 1];
            R12_TH=transl(0,0,DH_TH(2,1))*[cos(DH_TH(2,2)) -sin(DH_TH(2,2)) 0 0; sin(DH_TH(2,2)) cos(DH_TH(2,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(2,3),0,0)*[1 0 0 0; 0 cos(DH_TH(2,4)) -sin(DH_TH(2,4)) 0; 0 sin(DH_TH(2,4)) cos(DH_TH(2,4)) 0; 0 0 0 1];
            R23_TH=transl(0,0,DH_TH(3,1))*[cos(DH_TH(3,2)) -sin(DH_TH(3,2)) 0 0; sin(DH_TH(3,2)) cos(DH_TH(3,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(3,3),0,0)*[1 0 0 0; 0 cos(DH_TH(3,4)) -sin(DH_TH(3,4)) 0; 0 sin(DH_TH(3,4)) cos(DH_TH(3,4)) 0; 0 0 0 1];
            R34_TH=transl(0,0,DH_TH(4,1))*[cos(DH_TH(4,2)) -sin(DH_TH(4,2)) 0 0; sin(DH_TH(4,2)) cos(DH_TH(4,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(4,3),0,0)*[1 0 0 0; 0 cos(DH_TH(4,4)) -sin(DH_TH(4,4)) 0; 0 sin(DH_TH(4,4)) cos(DH_TH(4,4)) 0; 0 0 0 1];
            R45_TH=transl(0,0,DH_TH(5,1))*[cos(DH_TH(5,2)) -sin(DH_TH(5,2)) 0 0; sin(DH_TH(5,2)) cos(DH_TH(5,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(5,3),0,0)*[1 0 0 0; 0 cos(DH_TH(5,4)) -sin(DH_TH(5,4)) 0; 0 sin(DH_TH(5,4)) cos(DH_TH(5,4)) 0; 0 0 0 1];
            R56_TH=transl(0,0,DH_TH(6,1))*[cos(DH_TH(6,2)) -sin(DH_TH(6,2)) 0 0; sin(DH_TH(6,2)) cos(DH_TH(6,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(6,3),0,0)*[1 0 0 0; 0 cos(DH_TH(6,4)) -sin(DH_TH(6,4)) 0; 0 sin(DH_TH(6,4)) cos(DH_TH(6,4)) 0; 0 0 0 1];
            R67_TH=transl(0,0,DH_TH(7,1))*[cos(DH_TH(7,2)) -sin(DH_TH(7,2)) 0 0; sin(DH_TH(7,2)) cos(DH_TH(7,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(7,3),0,0)*[1 0 0 0; 0 cos(DH_TH(7,4)) -sin(DH_TH(7,4)) 0; 0 sin(DH_TH(7,4)) cos(DH_TH(7,4)) 0; 0 0 0 1];
            R78_TH=transl(0,0,DH_TH(8,1))*[cos(DH_TH(8,2)) -sin(DH_TH(8,2)) 0 0; sin(DH_TH(8,2)) cos(DH_TH(8,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(8,3),0,0)*[1 0 0 0; 0 cos(DH_TH(8,4)) -sin(DH_TH(8,4)) 0; 0 sin(DH_TH(8,4)) cos(DH_TH(8,4)) 0; 0 0 0 1];
            
            Origin_THRef=OriginRef*transl(A0_TH,B0_TH,C0_TH)*[1 0 0 0; 0 cos(D0_TH) -sin(D0_TH) 0; 0 sin(D0_TH) cos(D0_TH) 0; 0 0 0 1]*[cos(E0_TH) 0 sin(E0_TH) 0; 0 1 0 0; -sin(E0_TH) 0 cos(E0_TH) 0; 0 0 0 1]*[cos(F0_TH) -sin(F0_TH) 0 0; sin(F0_TH) cos(F0_TH) 0 0; 0 0 1 0; 0 0 0 1];
            R7_TH=Origin_THRef*R01_TH*R12_TH*R23_TH*R34_TH*R45_TH*R56_TH*R67_TH*R78_TH;
            Joint7Ref_TH=[R7_TH(1,4); R7_TH(2,4); R7_TH(3,4)];
            
            % ccode(Joint7Ref_TH,'file','Joint7Ref_TH2.txt');
            % 'Joint7Ref_TH written'
            
            JacobianMatRef_TH = [diff(Joint7Ref_TH(1),A1_TH) diff(Joint7Ref_TH(1),B1_TH) diff(Joint7Ref_TH(1),C1_TH) diff(Joint7Ref_TH(1),D1_TH) diff(Joint7Ref_TH(1),A2_TH) diff(Joint7Ref_TH(1),C2_TH) diff(Joint7Ref_TH(1),D2_TH) diff(Joint7Ref_TH(1),A3_TH) diff(Joint7Ref_TH(1),D4_TH) diff(Joint7Ref_TH(1),A5_TH) diff(Joint7Ref_TH(1),C5_TH) diff(Joint7Ref_TH(1),D5_TH) diff(Joint7Ref_TH(1),A6_TH) diff(Joint7Ref_TH(1),A7_TH) diff(Joint7Ref_TH(1),B7_TH) diff(Joint7Ref_TH(1),C7_TH) diff(Joint7Ref_TH(1),D7_TH) diff(Joint7Ref_TH(1),A0_TH) diff(Joint7Ref_TH(1),B0_TH) diff(Joint7Ref_TH(1),C0_TH) diff(Joint7Ref_TH(1),D0_TH) diff(Joint7Ref_TH(1),E0_TH) diff(Joint7Ref_TH(1),F0_TH); 
                diff(Joint7Ref_TH(2),A1_TH) diff(Joint7Ref_TH(2),B1_TH) diff(Joint7Ref_TH(2),C1_TH) diff(Joint7Ref_TH(2),D1_TH) diff(Joint7Ref_TH(2),A2_TH) diff(Joint7Ref_TH(2),C2_TH) diff(Joint7Ref_TH(2),D2_TH) diff(Joint7Ref_TH(2),A3_TH) diff(Joint7Ref_TH(2),D4_TH) diff(Joint7Ref_TH(2),A5_TH) diff(Joint7Ref_TH(2),C5_TH) diff(Joint7Ref_TH(2),D5_TH) diff(Joint7Ref_TH(2),A6_TH) diff(Joint7Ref_TH(2),A7_TH) diff(Joint7Ref_TH(2),B7_TH) diff(Joint7Ref_TH(2),C7_TH) diff(Joint7Ref_TH(2),D7_TH) diff(Joint7Ref_TH(2),A0_TH) diff(Joint7Ref_TH(2),B0_TH) diff(Joint7Ref_TH(2),C0_TH) diff(Joint7Ref_TH(2),D0_TH) diff(Joint7Ref_TH(2),E0_TH) diff(Joint7Ref_TH(2),F0_TH); 
                diff(Joint7Ref_TH(3),A1_TH) diff(Joint7Ref_TH(3),B1_TH) diff(Joint7Ref_TH(3),C1_TH) diff(Joint7Ref_TH(3),D1_TH) diff(Joint7Ref_TH(3),A2_TH) diff(Joint7Ref_TH(3),C2_TH) diff(Joint7Ref_TH(3),D2_TH) diff(Joint7Ref_TH(3),A3_TH) diff(Joint7Ref_TH(3),D4_TH) diff(Joint7Ref_TH(3),A5_TH) diff(Joint7Ref_TH(3),C5_TH) diff(Joint7Ref_TH(3),D5_TH) diff(Joint7Ref_TH(3),A6_TH) diff(Joint7Ref_TH(3),A7_TH) diff(Joint7Ref_TH(3),B7_TH) diff(Joint7Ref_TH(3),C7_TH) diff(Joint7Ref_TH(3),D7_TH) diff(Joint7Ref_TH(3),A0_TH) diff(Joint7Ref_TH(3),B0_TH) diff(Joint7Ref_TH(3),C0_TH) diff(Joint7Ref_TH(3),D0_TH) diff(Joint7Ref_TH(3),E0_TH) diff(Joint7Ref_TH(3),F0_TH)];
            
            % ccode(JacobianMatRef_TH,'file','JacobianMatRef_TH2.txt');
            % 'JacobianMatRef_TH written'
            
            DH_MI=[A1_MI B1_MI C1_MI D1_MI; A2_MI B2_MI C2_MI D2_MI; A3_MI B3_MI C3_MI D3_MI; A4_MI B4_MI C4_MI D4_MI; A5_MI B5_MI C5_MI D5_MI; A6_MI B6_MI C6_MI D6_MI; A7_MI B7_MI C7_MI D7_MI; A8_MI B8_MI C8_MI D8_MI];
            
            R01_MI=transl(0,0,DH_MI(1,1))*[cos(DH_MI(1,2)) -sin(DH_MI(1,2)) 0 0; sin(DH_MI(1,2)) cos(DH_MI(1,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(1,3),0,0)*[1 0 0 0; 0 cos(DH_MI(1,4)) -sin(DH_MI(1,4)) 0; 0 sin(DH_MI(1,4)) cos(DH_MI(1,4)) 0; 0 0 0 1];
            R12_MI=transl(0,0,DH_MI(2,1))*[cos(DH_MI(2,2)) -sin(DH_MI(2,2)) 0 0; sin(DH_MI(2,2)) cos(DH_MI(2,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(2,3),0,0)*[1 0 0 0; 0 cos(DH_MI(2,4)) -sin(DH_MI(2,4)) 0; 0 sin(DH_MI(2,4)) cos(DH_MI(2,4)) 0; 0 0 0 1];
            R23_MI=transl(0,0,DH_MI(3,1))*[cos(DH_MI(3,2)) -sin(DH_MI(3,2)) 0 0; sin(DH_MI(3,2)) cos(DH_MI(3,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(3,3),0,0)*[1 0 0 0; 0 cos(DH_MI(3,4)) -sin(DH_MI(3,4)) 0; 0 sin(DH_MI(3,4)) cos(DH_MI(3,4)) 0; 0 0 0 1];
            R34_MI=transl(0,0,DH_MI(4,1))*[cos(DH_MI(4,2)) -sin(DH_MI(4,2)) 0 0; sin(DH_MI(4,2)) cos(DH_MI(4,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(4,3),0,0)*[1 0 0 0; 0 cos(DH_MI(4,4)) -sin(DH_MI(4,4)) 0; 0 sin(DH_MI(4,4)) cos(DH_MI(4,4)) 0; 0 0 0 1];
            R45_MI=transl(0,0,DH_MI(5,1))*[cos(DH_MI(5,2)) -sin(DH_MI(5,2)) 0 0; sin(DH_MI(5,2)) cos(DH_MI(5,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(5,3),0,0)*[1 0 0 0; 0 cos(DH_MI(5,4)) -sin(DH_MI(5,4)) 0; 0 sin(DH_MI(5,4)) cos(DH_MI(5,4)) 0; 0 0 0 1];
            R56_MI=transl(0,0,DH_MI(6,1))*[cos(DH_MI(6,2)) -sin(DH_MI(6,2)) 0 0; sin(DH_MI(6,2)) cos(DH_MI(6,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(6,3),0,0)*[1 0 0 0; 0 cos(DH_MI(6,4)) -sin(DH_MI(6,4)) 0; 0 sin(DH_MI(6,4)) cos(DH_MI(6,4)) 0; 0 0 0 1];
            R67_MI=transl(0,0,DH_MI(7,1))*[cos(DH_MI(7,2)) -sin(DH_MI(7,2)) 0 0; sin(DH_MI(7,2)) cos(DH_MI(7,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(7,3),0,0)*[1 0 0 0; 0 cos(DH_MI(7,4)) -sin(DH_MI(7,4)) 0; 0 sin(DH_MI(7,4)) cos(DH_MI(7,4)) 0; 0 0 0 1];
            R78_MI=transl(0,0,DH_MI(8,1))*[cos(DH_MI(8,2)) -sin(DH_MI(8,2)) 0 0; sin(DH_MI(8,2)) cos(DH_MI(8,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(8,3),0,0)*[1 0 0 0; 0 cos(DH_MI(8,4)) -sin(DH_MI(8,4)) 0; 0 sin(DH_MI(8,4)) cos(DH_MI(8,4)) 0; 0 0 0 1];
            
            Origin_MIRef=OriginRef*transl(A0_MI,B0_MI,C0_MI)*[1 0 0 0; 0 cos(D0_MI) -sin(D0_MI) 0; 0 sin(D0_MI) cos(D0_MI) 0; 0 0 0 1]*[cos(E0_MI) 0 sin(E0_MI) 0; 0 1 0 0; -sin(E0_MI) 0 cos(E0_MI) 0; 0 0 0 1]*[cos(F0_MI) -sin(F0_MI) 0 0; sin(F0_MI) cos(F0_MI) 0 0; 0 0 1 0; 0 0 0 1];
            R7_MI=Origin_MIRef*R01_MI*R12_MI*R23_MI*R34_MI*R45_MI*R56_MI*R67_MI*R78_MI;
            Joint7Ref_MI=[R7_MI(1,4); R7_MI(2,4); R7_MI(3,4)];
            
            % ccode(Joint7Ref_MI,'file','Joint7Ref_MI2.txt');
            % 'Joint7Ref_MI written'
            
            JacobianMatRef_MI = [diff(Joint7Ref_MI(1),A1_MI) diff(Joint7Ref_MI(1),B1_MI) diff(Joint7Ref_MI(1),C1_MI) diff(Joint7Ref_MI(1),D1_MI) diff(Joint7Ref_MI(1),A2_MI) diff(Joint7Ref_MI(1),C2_MI) diff(Joint7Ref_MI(1),D2_MI) diff(Joint7Ref_MI(1),A3_MI) diff(Joint7Ref_MI(1),D4_MI) diff(Joint7Ref_MI(1),A5_MI) diff(Joint7Ref_MI(1),C5_MI) diff(Joint7Ref_MI(1),D5_MI) diff(Joint7Ref_MI(1),A6_MI) diff(Joint7Ref_MI(1),A7_MI) diff(Joint7Ref_MI(1),B7_MI) diff(Joint7Ref_MI(1),C7_MI) diff(Joint7Ref_MI(1),D7_MI) diff(Joint7Ref_MI(1),A0_MI) diff(Joint7Ref_MI(1),B0_MI) diff(Joint7Ref_MI(1),C0_MI) diff(Joint7Ref_MI(1),D0_MI) diff(Joint7Ref_MI(1),E0_MI) diff(Joint7Ref_MI(1),F0_MI); 
                diff(Joint7Ref_MI(2),A1_MI) diff(Joint7Ref_MI(2),B1_MI) diff(Joint7Ref_MI(2),C1_MI) diff(Joint7Ref_MI(2),D1_MI) diff(Joint7Ref_MI(2),A2_MI) diff(Joint7Ref_MI(2),C2_MI) diff(Joint7Ref_MI(2),D2_MI) diff(Joint7Ref_MI(2),A3_MI) diff(Joint7Ref_MI(2),D4_MI) diff(Joint7Ref_MI(2),A5_MI) diff(Joint7Ref_MI(2),C5_MI) diff(Joint7Ref_MI(2),D5_MI) diff(Joint7Ref_MI(2),A6_MI) diff(Joint7Ref_MI(2),A7_MI) diff(Joint7Ref_MI(2),B7_MI) diff(Joint7Ref_MI(2),C7_MI) diff(Joint7Ref_MI(2),D7_MI) diff(Joint7Ref_MI(2),A0_MI) diff(Joint7Ref_MI(2),B0_MI) diff(Joint7Ref_MI(2),C0_MI) diff(Joint7Ref_MI(2),D0_MI) diff(Joint7Ref_MI(2),E0_MI) diff(Joint7Ref_MI(2),F0_MI); 
                diff(Joint7Ref_MI(3),A1_MI) diff(Joint7Ref_MI(3),B1_MI) diff(Joint7Ref_MI(3),C1_MI) diff(Joint7Ref_MI(3),D1_MI) diff(Joint7Ref_MI(3),A2_MI) diff(Joint7Ref_MI(3),C2_MI) diff(Joint7Ref_MI(3),D2_MI) diff(Joint7Ref_MI(3),A3_MI) diff(Joint7Ref_MI(3),D4_MI) diff(Joint7Ref_MI(3),A5_MI) diff(Joint7Ref_MI(3),C5_MI) diff(Joint7Ref_MI(3),D5_MI) diff(Joint7Ref_MI(3),A6_MI) diff(Joint7Ref_MI(3),A7_MI) diff(Joint7Ref_MI(3),B7_MI) diff(Joint7Ref_MI(3),C7_MI) diff(Joint7Ref_MI(3),D7_MI) diff(Joint7Ref_MI(3),A0_MI) diff(Joint7Ref_MI(3),B0_MI) diff(Joint7Ref_MI(3),C0_MI) diff(Joint7Ref_MI(3),D0_MI) diff(Joint7Ref_MI(3),E0_MI) diff(Joint7Ref_MI(3),F0_MI)];
            
            app.StatusBarEditField.Value = 'Initialization has been finished';
            pause(0.5);
            current_it = 1;
            percentage_index = 1;
            for iter=500:100:800
                mag=sqrt(data3(iter,T1*3+1)^2+data3(iter,T1*3+2)^2+data3(iter,T1*3+3)^2);
                a=data3(iter,T1*3+1)/mag;
                b=data3(iter,T1*3+2)/mag;
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1_TH(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1_TH(iter)=atan2(0,a)-X;
                end
            
                if TH1_TH(iter)>halfpi
                    TH1_TH(iter)=halfpi;
                elseif TH1_TH(iter)<-halfpi
                    TH1_TH(iter)=-halfpi;
                end
            
                Y(iter)=sin(TH1_TH(iter))*alpha+cos(TH1_TH(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2_TH(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2_TH(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2_TH(iter)>halfpi
                    TH2_TH(iter)=halfpi;
                elseif TH2_TH(iter)<-halfpi
                    TH2_TH(iter)=-halfpi;
                end
            
                
                mag=sqrt(data3(iter,T2*3+1)^2+data3(iter,T2*3+2)^2+data3(iter,T2*3+3)^2);
                a=data3(iter,T2*3+1)/mag;
                b=data3(iter,T2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4_TH(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4_TH(iter)=atan2(a,0)-X;
                end
            
                if TH4_TH(iter)>halfpi
                    TH4_TH(iter)=halfpi;
                elseif TH4_TH(iter)<-halfpi
                    TH4_TH(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH4_TH(iter))*alpha+cos(TH4_TH(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3_TH(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3_TH(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3_TH(iter)>halfpi
                    TH3_TH(iter)=halfpi;
                elseif TH3_TH(iter)<-halfpi
                    TH3_TH(iter)=-halfpi;
                end
            
                TH4_TH(iter)=TH4_TH(iter)+pi/4;
            
                TH1_TH(iter)=TH1_TH(iter)-off_TH1_TH;
                TH2_TH(iter)=TH2_TH(iter)-off_TH2_TH;
                TH3_TH(iter)=TH3_TH(iter)-off_TH3_TH;
                TH4_TH(iter)=TH4_TH(iter)-off_TH4_TH;
                
                
                mag=sqrt(data3(iter,M1*3+1)^2+data3(iter,M1*3+2)^2+data3(iter,M1*3+3)^2);
                a=data3(iter,M1*3+1)/mag;
                b=data3(iter,M1*3+2)/mag;
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1_MI(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1_MI(iter)=atan2(0,a)-X;
                end
            
                if TH1_MI(iter)>halfpi
                    TH1_MI(iter)=halfpi;
                elseif TH1_MI(iter)<-halfpi
                    TH1_MI(iter)=-halfpi;
                end
            
                Y(iter)=sin(TH1_MI(iter))*alpha+cos(TH1_MI(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2_MI(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2_MI(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2_MI(iter)>halfpi
                    TH2_MI(iter)=halfpi;
                elseif TH2_MI(iter)<-halfpi
                    TH2_MI(iter)=-halfpi;
                end
                
                mag=sqrt(data3(iter,M2*3+1)^2+data3(iter,M2*3+2)^2+data3(iter,M2*3+3)^2);
                a=data3(iter,M2*3+1)/mag;
                b=data3(iter,M2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4_MI(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4_MI(iter)=atan2(a,0)-X;
                end
            
                if TH4_MI(iter)>halfpi
                    TH4_MI(iter)=halfpi;
                elseif TH4_MI(iter)<-halfpi
                    TH4_MI(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH4_MI(iter))*alpha+cos(TH4_MI(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3_MI(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3_MI(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3_MI(iter)>halfpi
                    TH3_MI(iter)=halfpi;
                elseif TH3_MI(iter)<-halfpi
                    TH3_MI(iter)=-halfpi;
                end
            
                TH4_MI(iter)=TH4_MI(iter)+pi/4;
            
                TH1_MI(iter)=TH1_MI(iter)-off_TH1_MI;
                TH2_MI(iter)=TH2_MI(iter)-off_TH2_MI;
                TH3_MI(iter)=TH3_MI(iter)-off_TH3_MI;
                TH4_MI(iter)=TH4_MI(iter)-off_TH4_MI;
                
                A1_TH=q_TH_double(1); B1_TH=q_TH_double(2); C1_TH=q_TH_double(3); D1_TH=q_TH_double(4);
                A2_TH=q_TH_double(5); B2_TH=TH1_TH(iter); C2_TH=q_TH_double(6); D2_TH=q_TH_double(7);
                A3_TH=q_TH_double(8); B3_TH=TH2_TH(iter); C3_TH=l2_TH; D3_TH=0;
                A4_TH=0; B4_TH=-halfpi; C4_TH=l3_TH; D4_TH=q_TH_double(9);
                A5_TH=q_TH_double(10); B5_TH=TH3_TH(iter); C5_TH=q_TH_double(11); D5_TH=q_TH_double(12);
                A6_TH=q_TH_double(13); B6_TH=TH4_TH(iter); C6_TH=l5_TH; D6_TH=0;
                A7_TH=q_TH_double(14); B7_TH=q_TH_double(15); C7_TH=q_TH_double(16); D7_TH=q_TH_double(17);
                A8_TH=l7_TH; B8_TH=halfpi; C8_TH=l8_TH; D8_TH=0; A0_TH=q_TH_double(18); B0_TH=q_TH_double(19); C0_TH=q_TH_double(20); D0_TH=q_TH_double(21); E0_TH=q_TH_double(22); F0_TH=q_TH_double(23);
                
                A1_MI=q_MI_double(1); B1_MI=q_MI_double(2); C1_MI=q_MI_double(3); D1_MI=q_MI_double(4);
                A2_MI=q_MI_double(5); B2_MI=TH1_MI(iter); C2_MI=q_MI_double(6); D2_MI=q_MI_double(7);
                A3_MI=q_MI_double(8); B3_MI=TH2_MI(iter); C3_MI=l2_MI; D3_MI=0;
                A4_MI=0; B4_MI=-halfpi; C4_MI=l3_MI; D4_MI=q_MI_double(9);
                A5_MI=q_MI_double(10); B5_MI=TH3_MI(iter); C5_MI=q_MI_double(11); D5_MI=q_MI_double(12);
                A6_MI=q_MI_double(13); B6_MI=TH4_MI(iter); C6_MI=l5_MI; D6_MI=0;
                A7_MI=q_MI_double(14); B7_MI=q_MI_double(15); C7_MI=q_MI_double(16); D7_MI=q_MI_double(17);
                A8_MI=l7_MI; B8_MI=halfpi; C8_MI=l8_MI; D8_MI=0; A0_MI=q_MI_double(18); B0_MI=q_MI_double(19); C0_MI=q_MI_double(20); D0_MI=q_MI_double(21); E0_MI=q_MI_double(22); F0_MI=q_MI_double(23);
               
                Joint7_TH=  subs(Joint7Ref_TH);
                Joint7_TH = vpa(Joint7_TH);
                Joint7_MI= subs(Joint7Ref_MI);
                Joint7_MI = vpa(Joint7_MI);
                
                for i=1:app.iteration
                    percentage = round(percentage_index * 100 / (app.iteration * 4));
                    %distance vector between thumb and middle end effector
                    error_TH=Joint7_MI-Joint7_TH;
                    disp('middle thumb\n')
                    disp(sqrt(error_TH(1)^2+error_TH(2)^2+error_TH(3)^2));
                    status_text = strcat('Calibrating: Middle-', int2str(current_it), '-', int2str(i), '(', int2str(percentage), '%) ', ' distance : ', int2str(sqrt(error_TH(1)^2+error_TH(2)^2+error_TH(3)^2)));
                    percentage_index = percentage_index + 1;
                    app.StatusBarEditField.Value = status_text;
                    pause(0.3);
                    
                    %error_TH
                    JacobianMat_TH=subs(JacobianMatRef_TH);
                    JacobianMat_TH=vpa(JacobianMat_TH);
                    % SVD decomposition
                    [u, d, v] = svd(JacobianMat_TH);
                    
                    % the sum of magnitude of vector in the ith column of U
                    N1 = sqrt(u(1,1)^2+u(2, 1)^2+u(3,1)^2);
                    N2 = sqrt(u(1,2)^2+u(2, 2)^2+u(3,2)^2);
                    N3 = sqrt(u(1,3)^2+u(2, 3)^2+u(3,3)^2);
                    
                    % relative magnitude of the change of end effector's position in jth joint angle
                    m1=0;
                    for i=1:1:23
                        m1 = m1 + v(i,1)*sqrt(JacobianMat_TH(1,i)^2 + JacobianMat_TH(2, i)^2 + JacobianMat_TH(3, i)^2);
                    end
                    sum_m1 = m1/d(1,1);
                    
                    m2=0;
                    for i=1:1:23
                        m2 = m2 + v(i,2)*sqrt(JacobianMat_TH(1, i)^2 + JacobianMat_TH(2, i)^2 + JacobianMat_TH(3, i)^2);
                    end
                    sum_m2 = m2/d(2,2);
                    
                    m3=0;
                    for i=1:1:23
                        m3 = m3 + v(i,3)*sqrt(JacobianMat_TH(1, i)^2 + JacobianMat_TH(2, i)^2 + JacobianMat_TH(3, i)^2);
                    end
                    sum_m3 = m3/d(3,3);
                    
                    % gamma for bounds
                    gamma_max = 0.2;
                    gamma1 = min(1, N1/sum_m1)*gamma_max;
                    gamma2 = min(1, N2/sum_m2)*gamma_max;
                    gamma3 = min(1, N3/sum_m3)*gamma_max;
                    
                    %clamp max
                    
                    phi1 = u(:, 1)'*error_TH*v(:, 1)/d(1, 1);
                    
                    if max(phi1) <= gamma1
                       phi1 = phi1;
                    else
                        phi1 = gamma1*phi1/max(phi1);
                    end
                    
                    phi2 = u(:, 2)'*error_TH*v(:, 2)/d(2, 2);
                    if max(phi2) <= gamma2
                        phi2 = phi2;
                    else
                        phi2 = gamma2*phi2/max(phi2);
                    end
                    
                    phi3 = u(:, 3)'*error_TH*v(:, 3)/d(3, 3);
                    if max(phi3) <=gamma3
                        phi3 = phi3;
                    else
                        phi3 = gamma3*phi3/max(phi3);
                    end
                    
                   phi = phi1+ phi2 + phi3;
                   
                   if max(phi) <=gamma_max
                        phi = phi;
                    else
                        phi = gamma_max*phi/max(phi);
                    end
                    
                    dq_TH = phi;
                    
                    
%                     dq_TH_=(JacobianMat_TH*JacobianMat_TH'+lambda*eye(3))\error_TH;
%                     dq_TH=JacobianMat_TH'*dq_TH_;
                   
                    q_TH_double=subs(qRef_TH);
                    q_TH_double=vpa(q_TH_double+dq_TH);
            
                    A1_TH=q_TH_double(1); B1_TH=q_TH_double(2); C1_TH=q_TH_double(3); D1_TH=q_TH_double(4);
                    A2_TH=q_TH_double(5); C2_TH=q_TH_double(6); D2_TH=q_TH_double(7);
                    A3_TH=q_TH_double(8); C3_TH=l2_TH; D3_TH=0;
                    A4_TH=0; B4_TH=-halfpi; C4_TH=l3_TH; D4_TH=q_TH_double(9);
                    A5_TH=q_TH_double(10); C5_TH=q_TH_double(11); D5_TH=q_TH_double(12);
                    A6_TH=q_TH_double(13); C6_TH=l5_TH; D6_TH=0;
                    A7_TH=q_TH_double(14); B7_TH=q_TH_double(15); C7_TH=q_TH_double(16); D7_TH=q_TH_double(17);
                    A8_TH=l7_TH; B8_TH=halfpi; C8_TH=l8_TH; D8_TH=0; A0_TH=q_TH_double(18); B0_TH=q_TH_double(19); C0_TH=q_TH_double(20); D0_TH=q_TH_double(21); E0_TH=q_TH_double(22); F0_TH=q_TH_double(23);
            
                    Joint7_TH=subs(Joint7Ref_TH);
                    Joint7_TH=vpa(Joint7_TH);
                    
                    error_MI=Joint7_TH-Joint7_MI;      
                    
                    JacobianMat_MI=subs(JacobianMatRef_MI);
                    JacobianMat_MI = vpa(JacobianMat_MI);
%                     JacobianMat=double(JacobianMat);

                    % SVD decomposition
                    [u, d, v] = svd(JacobianMat_MI);
                    
                    % the sum of magnitude of vector in the ith column of U
                    N1 = sqrt(u(1,1)^2+u(2, 1)^2+u(3,1)^2);
                    N2 = sqrt(u(1,2)^2+u(2, 2)^2+u(3,2)^2);
                    N3 = sqrt(u(1,3)^2+u(2, 3)^2+u(3,3)^2);
                    
                    % relative magnitude of the change of end effector's position in jth joint angle
                    m1=0;
                    for i=1:1:23
                        m1 = m1 + v(i,1)*sqrt(JacobianMat_MI(1,i)^2 + JacobianMat_MI(2, i)^2 + JacobianMat_MI(3, i)^2);
                    end
                    sum_m1 = m1/d(1,1);
                    
                    m2=0;
                    for i=1:1:23
                        m2 = m2 + v(i,2)*sqrt(JacobianMat_MI(1, i)^2 + JacobianMat_MI(2, i)^2 + JacobianMat_MI(3, i)^2);
                    end
                    sum_m2 = m2/d(2,2);
                    
                    m3=0;
                    for i=1:1:23
                        m3 = m3 + v(i,3)*sqrt(JacobianMat_MI(1, i)^2 + JacobianMat_MI(2, i)^2 + JacobianMat_MI(3, i)^2);
                    end
                    sum_m3 = m3/d(3,3);
                    
                    % gamma for bounds
                    gamma_max = 0.2;
                    gamma1 = min(1, N1/sum_m1)*gamma_max;
                    gamma2 = min(1, N2/sum_m2)*gamma_max;
                    gamma3 = min(1, N3/sum_m3)*gamma_max;
                    
                    %clamp max
                    
                    phi1 = u(:, 1)'*error_MI*v(:, 1)/d(1, 1);
                    
                    if max(phi1) <= gamma1
                       phi1 = phi1;
                    else
                        phi1 = gamma1*phi1/max(phi1);
                    end
                    
                    phi2 = u(:, 2)'*error_MI*v(:, 2)/d(2, 2);
                    if max(phi2) <= gamma2
                        phi2 = phi2;
                    else
                        phi2 = gamma2*phi2/max(phi2);
                    end
                    
                    phi3 = u(:, 3)'*error_MI*v(:, 3)/d(3, 3);
                    if max(phi3) <=gamma3
                        phi3 = phi3;
                    else
                        phi3 = gamma3*phi3/max(phi3);
                    end
                    
                   phi = phi1+ phi2 + phi3;
                   
                   if max(phi) <=gamma_max
                        phi = phi;
                    else
                        phi = gamma_max*phi/max(phi);
                    end
                    
                    dq_MI = phi;
            
%                     dq_MI_=(JacobianMat_MI*JacobianMat_MI'+lambda*eye(3))\error_MI;
%                     dq_MI=JacobianMat_MI'*dq_MI_;
                    q_MI_double=subs(qRef_MI);
                    q_MI_double=vpa(q_MI_double+dq_MI);
            
                    A1_MI=q_MI_double(1); B1_MI=q_MI_double(2); C1_MI=q_MI_double(3); D1_MI=q_MI_double(4);
                    A2_MI=q_MI_double(5); C2_MI=q_MI_double(6); D2_MI=q_MI_double(7);
                    A3_MI=q_MI_double(8); C3_MI=l2_MI; D3_MI=0;
                    A4_MI=0; B4_MI=-halfpi; C4_MI=l3_MI; D4_MI=q_MI_double(9);
                    A5_MI=q_MI_double(10); C5_MI=q_MI_double(11); D5_MI=q_MI_double(12);
                    A6_MI=q_MI_double(13); C6_MI=l5_MI; D6_MI=0;
                    A7_MI=q_MI_double(14); B7_MI=q_MI_double(15); C7_MI=q_MI_double(16); D7_MI=q_MI_double(17);
                    A8_MI=l7_MI; B8_MI=halfpi; C8_MI=l8_MI; D8_MI=0; A0_MI=q_MI_double(18); B0_MI=q_MI_double(19); C0_MI=q_MI_double(20); D0_MI=q_MI_double(21); E0_MI=q_MI_double(22); F0_MI=q_MI_double(23);
            
                    Joint7_MI=subs(Joint7Ref_MI);
                    Joint7_MI=vpa(Joint7_MI);
                end
                current_it = current_it + 1;
            end
            current_it = 1;
            percentage_index = 1;
            for iter=100:100:400
                mag=sqrt(data3(iter,T1*3+1)^2+data3(iter,T1*3+2)^2+data3(iter,T1*3+3)^2);
                a=data3(iter,T1*3+1)/mag;
                b=data3(iter,T1*3+2)/mag;
                
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1_TH(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1_TH(iter)=atan2(0,a)-X;
                end
            
                if TH1_TH(iter)>halfpi
                    TH1_TH(iter)=halfpi;
                elseif TH1_TH(iter)<-halfpi
                    TH1_TH(iter)=-halfpi;
                end
            
                Y(iter)=sin(TH1_TH(iter))*alpha+cos(TH1_TH(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2_TH(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2_TH(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2_TH(iter)>halfpi
                    TH2_TH(iter)=halfpi;
                elseif TH2_TH(iter)<-halfpi
                    TH2_TH(iter)=-halfpi;
                end
            
                
                mag=sqrt(data3(iter,T2*3+1)^2+data3(iter,T2*3+2)^2+data3(iter,T2*3+3)^2);
                a=data3(iter,T2*3+1)/mag;
                b=data3(iter,T2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4_TH(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4_TH(iter)=atan2(a,0)-X;
                end
            
                if TH4_TH(iter)>halfpi
                    TH4_TH(iter)=halfpi;
                elseif TH4_TH(iter)<-halfpi
                    TH4_TH(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH4_TH(iter))*alpha+cos(TH4_TH(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3_TH(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3_TH(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3_TH(iter)>halfpi
                    TH3_TH(iter)=halfpi;
                elseif TH3_TH(iter)<-halfpi
                    TH3_TH(iter)=-halfpi;
                end
            
                TH4_TH(iter)=TH4_TH(iter)+pi/4;
            
                TH1_TH(iter)=TH1_TH(iter)-off_TH1_TH;
                TH2_TH(iter)=TH2_TH(iter)-off_TH2_TH;
                TH3_TH(iter)=TH3_TH(iter)-off_TH3_TH;
                TH4_TH(iter)=TH4_TH(iter)-off_TH4_TH;
                
                mag=sqrt(data3(iter,I1*3+1)^2+data3(iter,I1*3+2)^2+data3(iter,I1*3+3)^2);
                a=data3(iter,I1*3+1)/mag;
                b=data3(iter,I1*3+2)/mag;
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1(iter)=atan2(0,a)-X;
                end
            
                if TH1(iter)>halfpi
                    TH1(iter)=halfpi;
                elseif TH1(iter)<-halfpi
                    TH1(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH1(iter))*alpha+cos(TH1(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2(iter)>halfpi
                    TH2(iter)=halfpi;
                elseif TH2(iter)<-halfpi
                    TH2(iter)=-halfpi;
                end
                
                mag=sqrt(data3(iter,I2*3+1)^2+data3(iter,I2*3+2)^2+data3(iter,I2*3+3)^2);
                a=data3(iter,I2*3+1)/mag;
                b=data3(iter,I2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4(iter)=atan2(a,0)-X;
                end
            
                if TH4(iter)>halfpi
                    TH4(iter)=halfpi;
                elseif TH4(iter)<-halfpi
                    TH4(iter)=-halfpi;
                end
            
            
                Y(iter)=-sin(TH4(iter))*alpha+cos(TH4(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3(iter)>halfpi
                    TH3(iter)=halfpi;
                elseif TH3(iter)<-halfpi
                    TH3(iter)=-halfpi;
                end
            
                TH4(iter)=TH4(iter)+pi/4;
            
                TH1(iter)=TH1(iter)-off_TH1;
                TH2(iter)=TH2(iter)-off_TH2;
                TH3(iter)=TH3(iter)-off_TH3;
                TH4(iter)=TH4(iter)-off_TH4;
            
                A1_TH=q_TH_double(1); B1_TH=q_TH_double(2); C1_TH=q_TH_double(3); D1_TH=q_TH_double(4);
                A2_TH=q_TH_double(5); B2_TH=TH1_TH(iter); C2_TH=q_TH_double(6); D2_TH=q_TH_double(7);
                A3_TH=q_TH_double(8); B3_TH=TH2_TH(iter); C3_TH=l2_TH; D3_TH=0;
                A4_TH=0; B4_TH=-halfpi; C4_TH=l3_TH; D4_TH=q_TH_double(9);
                A5_TH=q_TH_double(10); B5_TH=TH3_TH(iter); C5_TH=q_TH_double(11); D5_TH=q_TH_double(12);
                A6_TH=q_TH_double(13); B6_TH=TH4_TH(iter); C6_TH=l5_TH; D6_TH=0;
                A7_TH=q_TH_double(14); B7_TH=q_TH_double(15); C7_TH=q_TH_double(16); D7_TH=q_TH_double(17);
                A8_TH=l7_TH; B8_TH=halfpi; C8_TH=l8_TH; D8_TH=0; A0_TH=q_TH_double(18); B0_TH=q_TH_double(19); C0_TH=q_TH_double(20); D0_TH=q_TH_double(21); E0_TH=q_TH_double(22); F0_TH=q_TH_double(23);
            
                A1=q_double(1); B1=q_double(2); C1=q_double(3); D1=q_double(4);
                A2=q_double(5); B2=TH1(iter); C2=q_double(6); D2=q_double(7);
                A3=q_double(8); B3=TH2(iter); C3=l2; D3=0;
                A4=0; B4=-halfpi; C4=l3; D4=q_double(9);
                A5=q_double(10); B5=TH3(iter); C5=q_double(11); D5=q_double(12);
                A6=q_double(13); B6=TH4(iter); C6=l5; D6=0;
                A7=q_double(14); B7=q_double(15); C7=q_double(16); D7=q_double(17);
                A8=l7; B8=halfpi; C8=l8; D8=0;
            
                Joint7_TH=  subs(Joint7Ref_TH);
                Joint7_TH = vpa(Joint7_TH);
                Joint7= subs(Joint7Ref);
                Joint7 = vpa(Joint7);
                
                for i=1:app.iteration
                    percentage = round(percentage_index * 100 / (app.iteration * 4));
                    status_text = strcat('Calibrating: Index-', int2str(current_it), '-', int2str(i),  '(', int2str(percentage), '%)' ,' distance : ', int2str(sqrt(error_TH(1)^2+error_TH(2)^2+error_TH(3)^2)));
                    percentage_index = percentage_index + 1;
                    app.StatusBarEditField.Value = status_text;
                    pause(0.3);
                    error=Joint7_TH-Joint7;
                    
                    JacobianMat=subs(JacobianMatRef);
                    JacobianMat=vpa(JacobianMat);
            
%                     dq_=(JacobianMat*JacobianMat'+lambda*eye(3))\error;
%                     dq=JacobianMat'*dq_;


                    
                    % SVD decomposition
                    [u, d, v] = svd(JacobianMat);
                    
                    % the sum of magnitude of vector in the ith column of U
                    N1 = sqrt(u(1,1)^2+u(2, 1)^2+u(3,1)^2);
                    N2 = sqrt(u(1,2)^2+u(2, 2)^2+u(3,2)^2);
                    N3 = sqrt(u(1,3)^2+u(2, 3)^2+u(3,3)^2);
                    
                    % relative magnitude of the change of end effector's position in jth joint angle
                    m1=0;
                    for i=1:1:23
                        m1 = m1 + v(i,1)*sqrt(JacobianMat(1,i)^2 + JacobianMat(2, i)^2 + JacobianMat(3, i)^2);
                    end
                    sum_m1 = m1/d(1,1);
                    
                    m2=0;
                    for i=1:1:23
                        m2 = m2 + v(i,2)*sqrt(JacobianMat(1, i)^2 + JacobianMat(2, i)^2 + JacobianMat(3, i)^2);
                    end
                    sum_m2 = m2/d(2,2);
                    
                    m3=0;
                    for i=1:1:23
                        m3 = m3 + v(i,3)*sqrt(JacobianMat(1, i)^2 + JacobianMat(2, i)^2 + JacobianMat(3, i)^2);
                    end
                    sum_m3 = m3/d(3,3);
                    
                    % gamma for bounds
                    gamma_max = 0.2;
                    gamma1 = min(1, N1/sum_m1)*gamma_max;
                    gamma2 = min(1, N2/sum_m2)*gamma_max;
                    gamma3 = min(1, N3/sum_m3)*gamma_max;
                    
                    %clamp max
                    
                    phi1 = u(:, 1)'*error*v(:, 1)/d(1, 1);
                    
                    if max(phi1) <= gamma1
                       phi1 = phi1;
                    else
                        phi1 = gamma1*phi1/max(phi1);
                    end
                    
                    phi2 = u(:, 2)'*error*v(:, 2)/d(2, 2);
                    if max(phi2) <= gamma2
                        phi2 = phi2;
                    else
                        phi2 = gamma2*phi2/max(phi2);
                    end
                    
                    phi3 = u(:, 3)'*error*v(:, 3)/d(3, 3);
                    if max(phi3) <=gamma3
                        phi3 = phi3;
                    else
                        phi3 = gamma3*phi3/max(phi3);
                    end
                    
                   phi = phi1+ phi2 + phi3;
                   
                   if max(phi) <=gamma_max
                        phi = phi;
                    else
                        phi = gamma_max*phi/max(phi);
                    end
                    
                    dq = phi;


                    q_double=subs(qRef);
                    q_double=vpa(q_double+dq);
            
                    A1=q_double(1); B1=q_double(2); C1=q_double(3); D1=q_double(4);
                    A2=q_double(5); C2=q_double(6); D2=q_double(7);
                    A3=q_double(8); C3=l2; D3=0;
                    A4=0; B4=-halfpi; C4=l3; D4=q_double(9);
                    A5=q_double(10); C5=q_double(11); D5=q_double(12);
                    A6=q_double(13); C6=l5; D6=0;
                    A7=q_double(14); B7=q_double(15); C7=q_double(16); D7=q_double(17);
                    A8=l7; B8=halfpi; C8=l8; D8=0;
                
                    Joint7=subs(Joint7Ref);
                    Joint7=vpa(Joint7);
                    
                end
                current_it = current_it + 1;
            end
            app.DH_off = [subs(q_double) subs(q_TH_double) subs(q_MI_double)];
            app.ReadytoExportLamp.Color = 'green';
            app.StatusBarEditField.Value = 'Calibration has been finished. Ready to export';
            if(app.auto_export)
                app.exportParametersAuto()
            end
        end
        
        function results = calibrate_mocap_right(app)
            app.StatusBarEditField.Value = 'Starting Right Mocap Calibration';
            data3 = app.data;
            alpha=0;
            beta=0;
            gamma=1;
            halfpi = pi / 2;
            T1=1;
            T2=0;
            I1=2;
            I2=3;
            M1=4;
            M2=5;
            
            l1=24.2;
            l2=56.03;
            l3=12.94;
            l4=47.5;
            l5=19.5;
            % l6=22.96;
            l6 = 24.90;
            l7=-10.42;
            l8=16.61;
            
            l1_TH=24.2;
            l2_TH=56.03;
            l3_TH=12.94;
            l4_TH=57.5;
            l5_TH=19.5;
            % l6_TH=24.82;
            l6_TH = 27.25;
            l7_TH=10.42;
            l8_TH=16.61;
            
            l1_MI=24.2;
            l2_MI=56.03;
            l3_MI=12.94;
            l4_MI=47.5;
            l5_MI=19.5;
            % l6_MI=22.93;
            l6_MI = 24.19;
            l7_MI=-10.42;
            l8_MI=16.61;
            
            lambda=app.lambda;
            
            syms A0_TH B0_TH C0_TH D0_TH E0_TH F0_TH A0_MI B0_MI C0_MI D0_MI E0_MI F0_MI A1 B1 C1 D1 A2 B2 C2 D2 A3 B3 C3 D3 A4 B4 C4 D4 A5 B5 C5 D5 A6 B6 C6 D6 A7 B7 C7 D7 A8 B8 C8 D8 A1_TH B1_TH C1_TH D1_TH A2_TH B2_TH C2_TH D2_TH A3_TH B3_TH C3_TH D3_TH A4_TH B4_TH C4_TH D4_TH A5_TH B5_TH C5_TH D5_TH A6_TH B6_TH C6_TH D6_TH A7_TH B7_TH C7_TH D7_TH A8_TH B8_TH C8_TH D8_TH A1_MI B1_MI C1_MI D1_MI A2_MI B2_MI C2_MI D2_MI A3_MI B3_MI C3_MI D3_MI A4_MI B4_MI C4_MI D4_MI A5_MI B5_MI C5_MI D5_MI A6_MI B6_MI C6_MI D6_MI A7_MI B7_MI C7_MI D7_MI A8_MI B8_MI C8_MI D8_MI
            
            
            Origin=[1 0 0 0; 0 1 0 0; 0 0 1 0; 0 0 0 1];%% initial values
            % Origin_TH=Origin*transl(-86.71,-28.55,22.75)*trotz(24*pi/180)*trotx(-75*pi/180)*troty(54*pi/180)*trotz(45*pi/180);%% initial values
            Origin_TH=Origin*transl(-88.75,-29.04,-24.35)*trotz(24*pi/180)*trotx(-75*pi/180)*troty(54*pi/180)*trotz(45*pi/180);%% initial values
            Origin_THParam=[-88.75 -29.04 -24.35 asin(-Origin_TH(2,3)/cos(asin(Origin_TH(1,3)))) asin(Origin_TH(1,3)) asin(-Origin_TH(1,2)/cos(asin(Origin_TH(1,3))))];
            Origin_MI=Origin*transl(0,0,19);%% initial values
            Origin_MIParam=[0 0 19 0 0 0];
            
            q_double=[0 0 0 -halfpi 0 l1 halfpi 0 0 0 l4 0 0 0 -halfpi l6 0]; %% initial values
            q_TH_double=[0 0 0 -halfpi 0 l1_TH halfpi 0 0 0 l4_TH 0 0 0 -halfpi l6_TH 0 Origin_THParam(1) Origin_THParam(2) Origin_THParam(3) Origin_THParam(4) Origin_THParam(5) Origin_THParam(6)]; %% initial values
            q_MI_double=[0 0 0 -halfpi 0 l1_MI halfpi 0 0 0 l4_MI 0 0 0 -halfpi l6_MI 0 Origin_MIParam(1) Origin_MIParam(2) Origin_MIParam(3) Origin_MIParam(4) Origin_MIParam(5) Origin_MIParam(6)]; %% initial values
            
            DHinit=[[q_double';0;0;0;0;0;0] q_TH_double' q_MI_double'];
            
            app.DH_init = DHinit;
            off_TH1=app.off_TH1;
            off_TH2=app.off_TH2;
            off_TH3=app.off_TH3;
            off_TH4=app.off_TH4;
            
            off_TH1_MI= app.off_TH1_MI;
            off_TH2_MI= app.off_TH2_MI;
            off_TH3_MI= app.off_TH3_MI;
            off_TH4_MI= app.off_TH4_MI;
            
            off_TH1_TH= app.off_TH1_TH;
            off_TH2_TH= app.off_TH2_TH;
            off_TH3_TH= app.off_TH3_TH;
            off_TH4_TH= app.off_TH4_TH;
            
            qRef=[A1 B1 C1 D1 A2 C2 D2 A3 D4 A5 C5 D5 A6 A7 B7 C7 D7]';
            qRef_TH=[A1_TH B1_TH C1_TH D1_TH A2_TH C2_TH D2_TH A3_TH D4_TH A5_TH C5_TH D5_TH A6_TH A7_TH B7_TH C7_TH D7_TH A0_TH B0_TH C0_TH D0_TH E0_TH F0_TH]';
            qRef_MI=[A1_MI B1_MI C1_MI D1_MI A2_MI C2_MI D2_MI A3_MI D4_MI A5_MI C5_MI D5_MI A6_MI A7_MI B7_MI C7_MI D7_MI A0_MI B0_MI C0_MI D0_MI E0_MI F0_MI]';
            
            DHRef = [A1 B1 C1 D1; A2 B2 C2 D2; A3 B3 C3 D3; A4 B4 C4 D4; A5 B5 C5 D5; A6 B6 C6 D6; A7 B7 C7 D7; A8 B8 C8 D8];
            
            R01=transl(0,0,DHRef(1,1))*[cos(DHRef(1,2)) -sin(DHRef(1,2)) 0 0; sin(DHRef(1,2)) cos(DHRef(1,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(1,3),0,0)*[1 0 0 0; 0 cos(DHRef(1,4)) -sin(DHRef(1,4)) 0; 0 sin(DHRef(1,4)) cos(DHRef(1,4)) 0; 0 0 0 1];
            R12=transl(0,0,DHRef(2,1))*[cos(DHRef(2,2)) -sin(DHRef(2,2)) 0 0; sin(DHRef(2,2)) cos(DHRef(2,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(2,3),0,0)*[1 0 0 0; 0 cos(DHRef(2,4)) -sin(DHRef(2,4)) 0; 0 sin(DHRef(2,4)) cos(DHRef(2,4)) 0; 0 0 0 1];
            R23=transl(0,0,DHRef(3,1))*[cos(DHRef(3,2)) -sin(DHRef(3,2)) 0 0; sin(DHRef(3,2)) cos(DHRef(3,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(3,3),0,0)*[1 0 0 0; 0 cos(DHRef(3,4)) -sin(DHRef(3,4)) 0; 0 sin(DHRef(3,4)) cos(DHRef(3,4)) 0; 0 0 0 1];
            R34=transl(0,0,DHRef(4,1))*[cos(DHRef(4,2)) -sin(DHRef(4,2)) 0 0; sin(DHRef(4,2)) cos(DHRef(4,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(4,3),0,0)*[1 0 0 0; 0 cos(DHRef(4,4)) -sin(DHRef(4,4)) 0; 0 sin(DHRef(4,4)) cos(DHRef(4,4)) 0; 0 0 0 1];
            R45=transl(0,0,DHRef(5,1))*[cos(DHRef(5,2)) -sin(DHRef(5,2)) 0 0; sin(DHRef(5,2)) cos(DHRef(5,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(5,3),0,0)*[1 0 0 0; 0 cos(DHRef(5,4)) -sin(DHRef(5,4)) 0; 0 sin(DHRef(5,4)) cos(DHRef(5,4)) 0; 0 0 0 1];
            R56=transl(0,0,DHRef(6,1))*[cos(DHRef(6,2)) -sin(DHRef(6,2)) 0 0; sin(DHRef(6,2)) cos(DHRef(6,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(6,3),0,0)*[1 0 0 0; 0 cos(DHRef(6,4)) -sin(DHRef(6,4)) 0; 0 sin(DHRef(6,4)) cos(DHRef(6,4)) 0; 0 0 0 1];
            R67=transl(0,0,DHRef(7,1))*[cos(DHRef(7,2)) -sin(DHRef(7,2)) 0 0; sin(DHRef(7,2)) cos(DHRef(7,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(7,3),0,0)*[1 0 0 0; 0 cos(DHRef(7,4)) -sin(DHRef(7,4)) 0; 0 sin(DHRef(7,4)) cos(DHRef(7,4)) 0; 0 0 0 1];
            R78=transl(0,0,DHRef(8,1))*[cos(DHRef(8,2)) -sin(DHRef(8,2)) 0 0; sin(DHRef(8,2)) cos(DHRef(8,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DHRef(8,3),0,0)*[1 0 0 0; 0 cos(DHRef(8,4)) -sin(DHRef(8,4)) 0; 0 sin(DHRef(8,4)) cos(DHRef(8,4)) 0; 0 0 0 1];
            
            OriginRef=eye(4);
            
            R7=OriginRef*R01*R12*R23*R34*R45*R56*R67*R78;
            Joint7Ref=[R7(1,4); R7(2,4); R7(3,4)];
            
            % ccode(Joint7Ref,'file','Joint7Ref2.txt');
            % 'Joint7Ref written'
            
            JacobianMatRef = [diff(Joint7Ref(1),A1) diff(Joint7Ref(1),B1) diff(Joint7Ref(1),C1) diff(Joint7Ref(1),D1) diff(Joint7Ref(1),A2) diff(Joint7Ref(1),C2) diff(Joint7Ref(1),D2) diff(Joint7Ref(1),A3) diff(Joint7Ref(1),D4) diff(Joint7Ref(1),A5) diff(Joint7Ref(1),C5) diff(Joint7Ref(1),D5) diff(Joint7Ref(1),A6) diff(Joint7Ref(1),A7) diff(Joint7Ref(1),B7) diff(Joint7Ref(1),C7) diff(Joint7Ref(1),D7); 
                diff(Joint7Ref(2),A1) diff(Joint7Ref(2),B1) diff(Joint7Ref(2),C1) diff(Joint7Ref(2),D1) diff(Joint7Ref(2),A2) diff(Joint7Ref(2),C2) diff(Joint7Ref(2),D2) diff(Joint7Ref(2),A3) diff(Joint7Ref(2),D4) diff(Joint7Ref(2),A5) diff(Joint7Ref(2),C5) diff(Joint7Ref(2),D5) diff(Joint7Ref(2),A6) diff(Joint7Ref(2),A7) diff(Joint7Ref(2),B7) diff(Joint7Ref(2),C7) diff(Joint7Ref(2),D7); 
                diff(Joint7Ref(3),A1) diff(Joint7Ref(3),B1) diff(Joint7Ref(3),C1) diff(Joint7Ref(3),D1) diff(Joint7Ref(3),A2) diff(Joint7Ref(3),C2) diff(Joint7Ref(3),D2) diff(Joint7Ref(3),A3) diff(Joint7Ref(3),D4) diff(Joint7Ref(3),A5) diff(Joint7Ref(3),C5) diff(Joint7Ref(3),D5) diff(Joint7Ref(3),A6) diff(Joint7Ref(3),A7) diff(Joint7Ref(3),B7) diff(Joint7Ref(3),C7) diff(Joint7Ref(3),D7)];
            
            % ccode(JacobianMatRef,'file','JacobianMatRef2.txt');
            % 'JacobianMatRef written'
            
            DH_TH=[A1_TH B1_TH C1_TH D1_TH; A2_TH B2_TH C2_TH D2_TH; A3_TH B3_TH C3_TH D3_TH; A4_TH B4_TH C4_TH D4_TH; A5_TH B5_TH C5_TH D5_TH; A6_TH B6_TH C6_TH D6_TH; A7_TH B7_TH C7_TH D7_TH; A8_TH B8_TH C8_TH D8_TH];
            
            R01_TH=transl(0,0,DH_TH(1,1))*[cos(DH_TH(1,2)) -sin(DH_TH(1,2)) 0 0; sin(DH_TH(1,2)) cos(DH_TH(1,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(1,3),0,0)*[1 0 0 0; 0 cos(DH_TH(1,4)) -sin(DH_TH(1,4)) 0; 0 sin(DH_TH(1,4)) cos(DH_TH(1,4)) 0; 0 0 0 1];
            R12_TH=transl(0,0,DH_TH(2,1))*[cos(DH_TH(2,2)) -sin(DH_TH(2,2)) 0 0; sin(DH_TH(2,2)) cos(DH_TH(2,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(2,3),0,0)*[1 0 0 0; 0 cos(DH_TH(2,4)) -sin(DH_TH(2,4)) 0; 0 sin(DH_TH(2,4)) cos(DH_TH(2,4)) 0; 0 0 0 1];
            R23_TH=transl(0,0,DH_TH(3,1))*[cos(DH_TH(3,2)) -sin(DH_TH(3,2)) 0 0; sin(DH_TH(3,2)) cos(DH_TH(3,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(3,3),0,0)*[1 0 0 0; 0 cos(DH_TH(3,4)) -sin(DH_TH(3,4)) 0; 0 sin(DH_TH(3,4)) cos(DH_TH(3,4)) 0; 0 0 0 1];
            R34_TH=transl(0,0,DH_TH(4,1))*[cos(DH_TH(4,2)) -sin(DH_TH(4,2)) 0 0; sin(DH_TH(4,2)) cos(DH_TH(4,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(4,3),0,0)*[1 0 0 0; 0 cos(DH_TH(4,4)) -sin(DH_TH(4,4)) 0; 0 sin(DH_TH(4,4)) cos(DH_TH(4,4)) 0; 0 0 0 1];
            R45_TH=transl(0,0,DH_TH(5,1))*[cos(DH_TH(5,2)) -sin(DH_TH(5,2)) 0 0; sin(DH_TH(5,2)) cos(DH_TH(5,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(5,3),0,0)*[1 0 0 0; 0 cos(DH_TH(5,4)) -sin(DH_TH(5,4)) 0; 0 sin(DH_TH(5,4)) cos(DH_TH(5,4)) 0; 0 0 0 1];
            R56_TH=transl(0,0,DH_TH(6,1))*[cos(DH_TH(6,2)) -sin(DH_TH(6,2)) 0 0; sin(DH_TH(6,2)) cos(DH_TH(6,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(6,3),0,0)*[1 0 0 0; 0 cos(DH_TH(6,4)) -sin(DH_TH(6,4)) 0; 0 sin(DH_TH(6,4)) cos(DH_TH(6,4)) 0; 0 0 0 1];
            R67_TH=transl(0,0,DH_TH(7,1))*[cos(DH_TH(7,2)) -sin(DH_TH(7,2)) 0 0; sin(DH_TH(7,2)) cos(DH_TH(7,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(7,3),0,0)*[1 0 0 0; 0 cos(DH_TH(7,4)) -sin(DH_TH(7,4)) 0; 0 sin(DH_TH(7,4)) cos(DH_TH(7,4)) 0; 0 0 0 1];
            R78_TH=transl(0,0,DH_TH(8,1))*[cos(DH_TH(8,2)) -sin(DH_TH(8,2)) 0 0; sin(DH_TH(8,2)) cos(DH_TH(8,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_TH(8,3),0,0)*[1 0 0 0; 0 cos(DH_TH(8,4)) -sin(DH_TH(8,4)) 0; 0 sin(DH_TH(8,4)) cos(DH_TH(8,4)) 0; 0 0 0 1];
            
            Origin_THRef=OriginRef*transl(A0_TH,B0_TH,C0_TH)*[1 0 0 0; 0 cos(D0_TH) -sin(D0_TH) 0; 0 sin(D0_TH) cos(D0_TH) 0; 0 0 0 1]*[cos(E0_TH) 0 sin(E0_TH) 0; 0 1 0 0; -sin(E0_TH) 0 cos(E0_TH) 0; 0 0 0 1]*[cos(F0_TH) -sin(F0_TH) 0 0; sin(F0_TH) cos(F0_TH) 0 0; 0 0 1 0; 0 0 0 1];
            R7_TH=Origin_THRef*R01_TH*R12_TH*R23_TH*R34_TH*R45_TH*R56_TH*R67_TH*R78_TH;
            Joint7Ref_TH=[R7_TH(1,4); R7_TH(2,4); R7_TH(3,4)];
            
            % ccode(Joint7Ref_TH,'file','Joint7Ref_TH2.txt');
            % 'Joint7Ref_TH written'
            
            JacobianMatRef_TH = [diff(Joint7Ref_TH(1),A1_TH) diff(Joint7Ref_TH(1),B1_TH) diff(Joint7Ref_TH(1),C1_TH) diff(Joint7Ref_TH(1),D1_TH) diff(Joint7Ref_TH(1),A2_TH) diff(Joint7Ref_TH(1),C2_TH) diff(Joint7Ref_TH(1),D2_TH) diff(Joint7Ref_TH(1),A3_TH) diff(Joint7Ref_TH(1),D4_TH) diff(Joint7Ref_TH(1),A5_TH) diff(Joint7Ref_TH(1),C5_TH) diff(Joint7Ref_TH(1),D5_TH) diff(Joint7Ref_TH(1),A6_TH) diff(Joint7Ref_TH(1),A7_TH) diff(Joint7Ref_TH(1),B7_TH) diff(Joint7Ref_TH(1),C7_TH) diff(Joint7Ref_TH(1),D7_TH) diff(Joint7Ref_TH(1),A0_TH) diff(Joint7Ref_TH(1),B0_TH) diff(Joint7Ref_TH(1),C0_TH) diff(Joint7Ref_TH(1),D0_TH) diff(Joint7Ref_TH(1),E0_TH) diff(Joint7Ref_TH(1),F0_TH); 
                diff(Joint7Ref_TH(2),A1_TH) diff(Joint7Ref_TH(2),B1_TH) diff(Joint7Ref_TH(2),C1_TH) diff(Joint7Ref_TH(2),D1_TH) diff(Joint7Ref_TH(2),A2_TH) diff(Joint7Ref_TH(2),C2_TH) diff(Joint7Ref_TH(2),D2_TH) diff(Joint7Ref_TH(2),A3_TH) diff(Joint7Ref_TH(2),D4_TH) diff(Joint7Ref_TH(2),A5_TH) diff(Joint7Ref_TH(2),C5_TH) diff(Joint7Ref_TH(2),D5_TH) diff(Joint7Ref_TH(2),A6_TH) diff(Joint7Ref_TH(2),A7_TH) diff(Joint7Ref_TH(2),B7_TH) diff(Joint7Ref_TH(2),C7_TH) diff(Joint7Ref_TH(2),D7_TH) diff(Joint7Ref_TH(2),A0_TH) diff(Joint7Ref_TH(2),B0_TH) diff(Joint7Ref_TH(2),C0_TH) diff(Joint7Ref_TH(2),D0_TH) diff(Joint7Ref_TH(2),E0_TH) diff(Joint7Ref_TH(2),F0_TH); 
                diff(Joint7Ref_TH(3),A1_TH) diff(Joint7Ref_TH(3),B1_TH) diff(Joint7Ref_TH(3),C1_TH) diff(Joint7Ref_TH(3),D1_TH) diff(Joint7Ref_TH(3),A2_TH) diff(Joint7Ref_TH(3),C2_TH) diff(Joint7Ref_TH(3),D2_TH) diff(Joint7Ref_TH(3),A3_TH) diff(Joint7Ref_TH(3),D4_TH) diff(Joint7Ref_TH(3),A5_TH) diff(Joint7Ref_TH(3),C5_TH) diff(Joint7Ref_TH(3),D5_TH) diff(Joint7Ref_TH(3),A6_TH) diff(Joint7Ref_TH(3),A7_TH) diff(Joint7Ref_TH(3),B7_TH) diff(Joint7Ref_TH(3),C7_TH) diff(Joint7Ref_TH(3),D7_TH) diff(Joint7Ref_TH(3),A0_TH) diff(Joint7Ref_TH(3),B0_TH) diff(Joint7Ref_TH(3),C0_TH) diff(Joint7Ref_TH(3),D0_TH) diff(Joint7Ref_TH(3),E0_TH) diff(Joint7Ref_TH(3),F0_TH)];
            
            % ccode(JacobianMatRef_TH,'file','JacobianMatRef_TH2.txt');
            % 'JacobianMatRef_TH written'
            
            DH_MI=[A1_MI B1_MI C1_MI D1_MI; A2_MI B2_MI C2_MI D2_MI; A3_MI B3_MI C3_MI D3_MI; A4_MI B4_MI C4_MI D4_MI; A5_MI B5_MI C5_MI D5_MI; A6_MI B6_MI C6_MI D6_MI; A7_MI B7_MI C7_MI D7_MI; A8_MI B8_MI C8_MI D8_MI];
            
            R01_MI=transl(0,0,DH_MI(1,1))*[cos(DH_MI(1,2)) -sin(DH_MI(1,2)) 0 0; sin(DH_MI(1,2)) cos(DH_MI(1,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(1,3),0,0)*[1 0 0 0; 0 cos(DH_MI(1,4)) -sin(DH_MI(1,4)) 0; 0 sin(DH_MI(1,4)) cos(DH_MI(1,4)) 0; 0 0 0 1];
            R12_MI=transl(0,0,DH_MI(2,1))*[cos(DH_MI(2,2)) -sin(DH_MI(2,2)) 0 0; sin(DH_MI(2,2)) cos(DH_MI(2,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(2,3),0,0)*[1 0 0 0; 0 cos(DH_MI(2,4)) -sin(DH_MI(2,4)) 0; 0 sin(DH_MI(2,4)) cos(DH_MI(2,4)) 0; 0 0 0 1];
            R23_MI=transl(0,0,DH_MI(3,1))*[cos(DH_MI(3,2)) -sin(DH_MI(3,2)) 0 0; sin(DH_MI(3,2)) cos(DH_MI(3,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(3,3),0,0)*[1 0 0 0; 0 cos(DH_MI(3,4)) -sin(DH_MI(3,4)) 0; 0 sin(DH_MI(3,4)) cos(DH_MI(3,4)) 0; 0 0 0 1];
            R34_MI=transl(0,0,DH_MI(4,1))*[cos(DH_MI(4,2)) -sin(DH_MI(4,2)) 0 0; sin(DH_MI(4,2)) cos(DH_MI(4,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(4,3),0,0)*[1 0 0 0; 0 cos(DH_MI(4,4)) -sin(DH_MI(4,4)) 0; 0 sin(DH_MI(4,4)) cos(DH_MI(4,4)) 0; 0 0 0 1];
            R45_MI=transl(0,0,DH_MI(5,1))*[cos(DH_MI(5,2)) -sin(DH_MI(5,2)) 0 0; sin(DH_MI(5,2)) cos(DH_MI(5,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(5,3),0,0)*[1 0 0 0; 0 cos(DH_MI(5,4)) -sin(DH_MI(5,4)) 0; 0 sin(DH_MI(5,4)) cos(DH_MI(5,4)) 0; 0 0 0 1];
            R56_MI=transl(0,0,DH_MI(6,1))*[cos(DH_MI(6,2)) -sin(DH_MI(6,2)) 0 0; sin(DH_MI(6,2)) cos(DH_MI(6,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(6,3),0,0)*[1 0 0 0; 0 cos(DH_MI(6,4)) -sin(DH_MI(6,4)) 0; 0 sin(DH_MI(6,4)) cos(DH_MI(6,4)) 0; 0 0 0 1];
            R67_MI=transl(0,0,DH_MI(7,1))*[cos(DH_MI(7,2)) -sin(DH_MI(7,2)) 0 0; sin(DH_MI(7,2)) cos(DH_MI(7,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(7,3),0,0)*[1 0 0 0; 0 cos(DH_MI(7,4)) -sin(DH_MI(7,4)) 0; 0 sin(DH_MI(7,4)) cos(DH_MI(7,4)) 0; 0 0 0 1];
            R78_MI=transl(0,0,DH_MI(8,1))*[cos(DH_MI(8,2)) -sin(DH_MI(8,2)) 0 0; sin(DH_MI(8,2)) cos(DH_MI(8,2)) 0 0; 0 0 1 0; 0 0 0 1]*transl(DH_MI(8,3),0,0)*[1 0 0 0; 0 cos(DH_MI(8,4)) -sin(DH_MI(8,4)) 0; 0 sin(DH_MI(8,4)) cos(DH_MI(8,4)) 0; 0 0 0 1];
            
            Origin_MIRef=OriginRef*transl(A0_MI,B0_MI,C0_MI)*[1 0 0 0; 0 cos(D0_MI) -sin(D0_MI) 0; 0 sin(D0_MI) cos(D0_MI) 0; 0 0 0 1]*[cos(E0_MI) 0 sin(E0_MI) 0; 0 1 0 0; -sin(E0_MI) 0 cos(E0_MI) 0; 0 0 0 1]*[cos(F0_MI) -sin(F0_MI) 0 0; sin(F0_MI) cos(F0_MI) 0 0; 0 0 1 0; 0 0 0 1];
            R7_MI=Origin_MIRef*R01_MI*R12_MI*R23_MI*R34_MI*R45_MI*R56_MI*R67_MI*R78_MI;
            Joint7Ref_MI=[R7_MI(1,4); R7_MI(2,4); R7_MI(3,4)];
            
            % ccode(Joint7Ref_MI,'file','Joint7Ref_MI2.txt');
            % 'Joint7Ref_MI written'
            
            JacobianMatRef_MI = [diff(Joint7Ref_MI(1),A1_MI) diff(Joint7Ref_MI(1),B1_MI) diff(Joint7Ref_MI(1),C1_MI) diff(Joint7Ref_MI(1),D1_MI) diff(Joint7Ref_MI(1),A2_MI) diff(Joint7Ref_MI(1),C2_MI) diff(Joint7Ref_MI(1),D2_MI) diff(Joint7Ref_MI(1),A3_MI) diff(Joint7Ref_MI(1),D4_MI) diff(Joint7Ref_MI(1),A5_MI) diff(Joint7Ref_MI(1),C5_MI) diff(Joint7Ref_MI(1),D5_MI) diff(Joint7Ref_MI(1),A6_MI) diff(Joint7Ref_MI(1),A7_MI) diff(Joint7Ref_MI(1),B7_MI) diff(Joint7Ref_MI(1),C7_MI) diff(Joint7Ref_MI(1),D7_MI) diff(Joint7Ref_MI(1),A0_MI) diff(Joint7Ref_MI(1),B0_MI) diff(Joint7Ref_MI(1),C0_MI) diff(Joint7Ref_MI(1),D0_MI) diff(Joint7Ref_MI(1),E0_MI) diff(Joint7Ref_MI(1),F0_MI); 
                diff(Joint7Ref_MI(2),A1_MI) diff(Joint7Ref_MI(2),B1_MI) diff(Joint7Ref_MI(2),C1_MI) diff(Joint7Ref_MI(2),D1_MI) diff(Joint7Ref_MI(2),A2_MI) diff(Joint7Ref_MI(2),C2_MI) diff(Joint7Ref_MI(2),D2_MI) diff(Joint7Ref_MI(2),A3_MI) diff(Joint7Ref_MI(2),D4_MI) diff(Joint7Ref_MI(2),A5_MI) diff(Joint7Ref_MI(2),C5_MI) diff(Joint7Ref_MI(2),D5_MI) diff(Joint7Ref_MI(2),A6_MI) diff(Joint7Ref_MI(2),A7_MI) diff(Joint7Ref_MI(2),B7_MI) diff(Joint7Ref_MI(2),C7_MI) diff(Joint7Ref_MI(2),D7_MI) diff(Joint7Ref_MI(2),A0_MI) diff(Joint7Ref_MI(2),B0_MI) diff(Joint7Ref_MI(2),C0_MI) diff(Joint7Ref_MI(2),D0_MI) diff(Joint7Ref_MI(2),E0_MI) diff(Joint7Ref_MI(2),F0_MI); 
                diff(Joint7Ref_MI(3),A1_MI) diff(Joint7Ref_MI(3),B1_MI) diff(Joint7Ref_MI(3),C1_MI) diff(Joint7Ref_MI(3),D1_MI) diff(Joint7Ref_MI(3),A2_MI) diff(Joint7Ref_MI(3),C2_MI) diff(Joint7Ref_MI(3),D2_MI) diff(Joint7Ref_MI(3),A3_MI) diff(Joint7Ref_MI(3),D4_MI) diff(Joint7Ref_MI(3),A5_MI) diff(Joint7Ref_MI(3),C5_MI) diff(Joint7Ref_MI(3),D5_MI) diff(Joint7Ref_MI(3),A6_MI) diff(Joint7Ref_MI(3),A7_MI) diff(Joint7Ref_MI(3),B7_MI) diff(Joint7Ref_MI(3),C7_MI) diff(Joint7Ref_MI(3),D7_MI) diff(Joint7Ref_MI(3),A0_MI) diff(Joint7Ref_MI(3),B0_MI) diff(Joint7Ref_MI(3),C0_MI) diff(Joint7Ref_MI(3),D0_MI) diff(Joint7Ref_MI(3),E0_MI) diff(Joint7Ref_MI(3),F0_MI)];
            
            % ccode(JacobianMatRef_MI,'file','JacobianMatRef_MI2.txt');
            % 'JacobianMatRef_MI written'
            app.StatusBarEditField.Value = 'Initialization has been finished';
            pause(0.5);
            current_it = 1;
            percentage_index = 1;
            for iter=500:100:800
    
                mag=sqrt(data3(iter,T1*3+1)^2+data3(iter,T1*3+2)^2+data3(iter,T1*3+3)^2);
                a=data3(iter,T1*3+1)/mag;
                b=data3(iter,T1*3+2)/mag;
                
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1_TH(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1_TH(iter)=atan2(0,a)-X;
                end
            
                if TH1_TH(iter)>halfpi
                    TH1_TH(iter)=halfpi;
                elseif TH1_TH(iter)<-halfpi
                    TH1_TH(iter)=-halfpi;
                end
            
                Y(iter)=sin(TH1_TH(iter))*alpha+cos(TH1_TH(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2_TH(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2_TH(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2_TH(iter)>halfpi
                    TH2_TH(iter)=halfpi;
                elseif TH2_TH(iter)<-halfpi
                    TH2_TH(iter)=-halfpi;
                end
            
                
                mag=sqrt(data3(iter,T2*3+1)^2+data3(iter,T2*3+2)^2+data3(iter,T2*3+3)^2);
                a=data3(iter,T2*3+1)/mag;
                b=data3(iter,T2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4_TH(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4_TH(iter)=atan2(a,0)-X;
                end
            
                if TH4_TH(iter)>halfpi
                    TH4_TH(iter)=halfpi;
                elseif TH4_TH(iter)<-halfpi
                    TH4_TH(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH4_TH(iter))*alpha+cos(TH4_TH(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3_TH(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3_TH(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3_TH(iter)>halfpi
                    TH3_TH(iter)=halfpi;
                elseif TH3_TH(iter)<-halfpi
                    TH3_TH(iter)=-halfpi;
                end
            
                TH4_TH(iter)=TH4_TH(iter)+pi/4;
            
                TH1_TH(iter)=TH1_TH(iter)-off_TH1_TH;
                TH2_TH(iter)=TH2_TH(iter)-off_TH2_TH;
                TH3_TH(iter)=TH3_TH(iter)-off_TH3_TH;
                TH4_TH(iter)=TH4_TH(iter)-off_TH4_TH;
                
                mag=sqrt(data3(iter,M1*3+1)^2+data3(iter,M1*3+2)^2+data3(iter,M1*3+3)^2);
                a=data3(iter,M1*3+1)/mag;
                b=data3(iter,M1*3+2)/mag;
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1_MI(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1_MI(iter)=atan2(0,a)-X;
                end
            
                if TH1_MI(iter)>halfpi
                    TH1_MI(iter)=halfpi;
                elseif TH1_MI(iter)<-halfpi
                    TH1_MI(iter)=-halfpi;
                end
            
                Y(iter)=sin(TH1_MI(iter))*alpha+cos(TH1_MI(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2_MI(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2_MI(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2_MI(iter)>halfpi
                    TH2_MI(iter)=halfpi;
                elseif TH2_MI(iter)<-halfpi
                    TH2_MI(iter)=-halfpi;
                end
                
                mag=sqrt(data3(iter,M2*3+1)^2+data3(iter,M2*3+2)^2+data3(iter,M2*3+3)^2);
                a=data3(iter,M2*3+1)/mag;
                b=data3(iter,M2*3+2)/mag;
                
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4_MI(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4_MI(iter)=atan2(a,0)-X;
                end
            
                if TH4_MI(iter)>halfpi
                    TH4_MI(iter)=halfpi;
                elseif TH4_MI(iter)<-halfpi
                    TH4_MI(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH4_MI(iter))*alpha+cos(TH4_MI(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3_MI(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3_MI(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3_MI(iter)>halfpi
                    TH3_MI(iter)=halfpi;
                elseif TH3_MI(iter)<-halfpi
                    TH3_MI(iter)=-halfpi;
                end
            
                TH4_MI(iter)=TH4_MI(iter)+pi/4;
            
                TH1_MI(iter)=TH1_MI(iter)-off_TH1_MI;
                TH2_MI(iter)=TH2_MI(iter)-off_TH2_MI;
                TH3_MI(iter)=TH3_MI(iter)-off_TH3_MI;
                TH4_MI(iter)=TH4_MI(iter)-off_TH4_MI;
                
                A1_TH=q_TH_double(1); B1_TH=q_TH_double(2); C1_TH=q_TH_double(3); D1_TH=q_TH_double(4);
                A2_TH=q_TH_double(5); B2_TH=TH1_TH(iter); C2_TH=q_TH_double(6); D2_TH=q_TH_double(7);
                A3_TH=q_TH_double(8); B3_TH=TH2_TH(iter); C3_TH=l2_TH; D3_TH=0;
                A4_TH=0; B4_TH=-halfpi; C4_TH=l3_TH; D4_TH=q_TH_double(9);
                A5_TH=q_TH_double(10); B5_TH=TH3_TH(iter); C5_TH=q_TH_double(11); D5_TH=q_TH_double(12);
                A6_TH=q_TH_double(13); B6_TH=TH4_TH(iter); C6_TH=l5_TH; D6_TH=0;
                A7_TH=q_TH_double(14); B7_TH=q_TH_double(15); C7_TH=q_TH_double(16); D7_TH=q_TH_double(17);
                A8_TH=l7_TH; B8_TH=halfpi; C8_TH=l8_TH; D8_TH=0; A0_TH=q_TH_double(18); B0_TH=q_TH_double(19); C0_TH=q_TH_double(20); D0_TH=q_TH_double(21); E0_TH=q_TH_double(22); F0_TH=q_TH_double(23);
                
                A1_MI=q_MI_double(1); B1_MI=q_MI_double(2); C1_MI=q_MI_double(3); D1_MI=q_MI_double(4);
                A2_MI=q_MI_double(5); B2_MI=TH1_MI(iter); C2_MI=q_MI_double(6); D2_MI=q_MI_double(7);
                A3_MI=q_MI_double(8); B3_MI=TH2_MI(iter); C3_MI=l2_MI; D3_MI=0;
                A4_MI=0; B4_MI=-halfpi; C4_MI=l3_MI; D4_MI=q_MI_double(9);
                A5_MI=q_MI_double(10); B5_MI=TH3_MI(iter); C5_MI=q_MI_double(11); D5_MI=q_MI_double(12);
                A6_MI=q_MI_double(13); B6_MI=TH4_MI(iter); C6_MI=l5_MI; D6_MI=0;
                A7_MI=q_MI_double(14); B7_MI=q_MI_double(15); C7_MI=q_MI_double(16); D7_MI=q_MI_double(17);
                A8_MI=l7_MI; B8_MI=halfpi; C8_MI=l8_MI; D8_MI=0; A0_MI=q_MI_double(18); B0_MI=q_MI_double(19); C0_MI=q_MI_double(20); D0_MI=q_MI_double(21); E0_MI=q_MI_double(22); F0_MI=q_MI_double(23);
               
                Joint7_TH=  subs(Joint7Ref_TH);
                Joint7_TH = vpa(Joint7_TH);
                Joint7_MI= subs(Joint7Ref_MI);
                Joint7_MI = vpa(Joint7_MI);
                
                for i=1:app.iteration
                    percentage = round(percentage_index * 100 / (app.iteration * 4));
                    status_text = strcat('Calibrating: Middle-', int2str(current_it), '-', int2str(i), '(', int2str(percentage), '%)');
                    percentage_index = percentage_index + 1;
                    app.StatusBarEditField.Value = status_text;
                    pause(0.3);
                    error_TH=Joint7_MI-Joint7_TH;
            
                    JacobianMat_TH=subs(JacobianMatRef_TH);
                    JacobianMat_TH=vpa(JacobianMat_TH);
                    % SVD decomposition
                    [u, d, v] = svd(JacobianMat_TH);
                    
                    %the sumb of magnitude of vector in the ith column of U matrix
                    
                    N1 = sqrt(u(1,1)^2+u(2, 1)^2+u(3,1)^2);
                    N2 = sqrt(u(1,2)^2+u(2, 2)^2+u(3,2)^2);
                    N3 = sqrt(u(1,3)^2+u(2, 3)^2+u(3,3)^2);
                    
                    % relative magnitude of the change of end effector's position in jth joint angle
                    m1=0;
                    for i=1:1:23
                        m1 = m1 + v(i,1)*sqrt(JacobianMat_TH(1,i)^2 + JacobianMat_TH(2, i)^2 + JacobianMat_TH(3, i)^2);
                    end
                    sum_m1 = m1/d(1,1);
                    
                    m2=0;
                    for i=1:1:23
                        m2 = m2 + v(i,2)*sqrt(JacobianMat_TH(1, i)^2 + JacobianMat_TH(2, i)^2 + JacobianMat_TH(3, i)^2);
                    end
                    sum_m2 = m2/d(2,2);
                    
                    m3=0;
                    for i=1:1:23
                        m3 = m3 + v(i,3)*sqrt(JacobianMat_TH(1, i)^2 + JacobianMat_TH(2, i)^2 + JacobianMat_TH(3, i)^2);
                    end
                    sum_m3 = m3/d(3,3);
                    
                    % gamma for bounds
                    gamma_max = 0.2;
                    gamma1 = min(1, N1/sum_m1)*gamma_max;
                    gamma2 = min(1, N2/sum_m2)*gamma_max;
                    gamma3 = min(1, N3/sum_m3)*gamma_max;
                    
                    %clamp max
                    
                    phi1 = u(:, 1)'*error_TH*v(:, 1)/d(1, 1);
                    
                    if max(phi1) <= gamma1
                       phi1 = phi1;
                    else
                        phi1 = gamma1*phi1/max(phi1);
                    end
                    
                    phi2 = u(:, 2)'*error_TH*v(:, 2)/d(2, 2);
                    if max(phi2) <= gamma2
                        phi2 = phi2;
                    else
                        phi2 = gamma2*phi2/max(phi2);
                    end
                    
                    phi3 = u(:, 3)'*error_TH*v(:, 3)/d(3, 3);
                    if max(phi3) <=gamma3
                        phi3 = phi3;
                    else
                        phi3 = gamma3*phi3/max(phi3);
                    end
                    
                   phi = phi1+ phi2 + phi3;
                   
                   if max(phi) <=gamma_max
                        phi = phi;
                    else
                        phi = gamma_max*phi/max(phi);
                    end
                    
                    dq_TH = phi;
                    
%                     dq_TH_=(JacobianMat_TH*JacobianMat_TH'+lambda*eye(3))\error_TH;
%                     dq_TH=JacobianMat_TH'*dq_TH_;


                    q_TH_double=subs(qRef_TH);
                    q_TH_double=vpa(q_TH_double+dq_TH);
            
                    A1_TH=q_TH_double(1); B1_TH=q_TH_double(2); C1_TH=q_TH_double(3); D1_TH=q_TH_double(4);
                    A2_TH=q_TH_double(5); C2_TH=q_TH_double(6); D2_TH=q_TH_double(7);
                    A3_TH=q_TH_double(8); C3_TH=l2_TH; D3_TH=0;
                    A4_TH=0; B4_TH=-halfpi; C4_TH=l3_TH; D4_TH=q_TH_double(9);
                    A5_TH=q_TH_double(10); C5_TH=q_TH_double(11); D5_TH=q_TH_double(12);
                    A6_TH=q_TH_double(13); C6_TH=l5_TH; D6_TH=0;
                    A7_TH=q_TH_double(14); B7_TH=q_TH_double(15); C7_TH=q_TH_double(16); D7_TH=q_TH_double(17);
                    A8_TH=l7_TH; B8_TH=halfpi; C8_TH=l8_TH; D8_TH=0; A0_TH=q_TH_double(18); B0_TH=q_TH_double(19); C0_TH=q_TH_double(20); D0_TH=q_TH_double(21); E0_TH=q_TH_double(22); F0_TH=q_TH_double(23);
            
                    Joint7_TH=subs(Joint7Ref_TH);
                    Joint7_TH=vpa(Joint7_TH);
                    
                    error_MI=Joint7_TH-Joint7_MI;      
                    
                    JacobianMat_MI=subs(JacobianMatRef_MI);
                    %JacobianMat=double(JacobianMat);
            
                    dq_MI_=(JacobianMat_MI*JacobianMat_MI'+lambda*eye(3))\error_MI;
                    dq_MI=JacobianMat_MI'*dq_MI_;
                    q_MI_double=subs(qRef_MI);
                    q_MI_double=vpa(q_MI_double+dq_MI);
            
                    A1_MI=q_MI_double(1); B1_MI=q_MI_double(2); C1_MI=q_MI_double(3); D1_MI=q_MI_double(4);
                    A2_MI=q_MI_double(5); C2_MI=q_MI_double(6); D2_MI=q_MI_double(7);
                    A3_MI=q_MI_double(8); C3_MI=l2_MI; D3_MI=0;
                    A4_MI=0; B4_MI=-halfpi; C4_MI=l3_MI; D4_MI=q_MI_double(9);
                    A5_MI=q_MI_double(10); C5_MI=q_MI_double(11); D5_MI=q_MI_double(12);
                    A6_MI=q_MI_double(13); C6_MI=l5_MI; D6_MI=0;
                    A7_MI=q_MI_double(14); B7_MI=q_MI_double(15); C7_MI=q_MI_double(16); D7_MI=q_MI_double(17);
                    A8_MI=l7_MI; B8_MI=halfpi; C8_MI=l8_MI; D8_MI=0; A0_MI=q_MI_double(18); B0_MI=q_MI_double(19); C0_MI=q_MI_double(20); D0_MI=q_MI_double(21); E0_MI=q_MI_double(22); F0_MI=q_MI_double(23);
            
                    Joint7_MI=subs(Joint7Ref_MI);
                    Joint7_MI=vpa(Joint7_MI);
                end
                current_it = current_it + 1;
            end
            current_it = 1;
            percentage_index = 1;
            for iter=100:100:400
                
                mag=sqrt(data3(iter,T1*3+1)^2+data3(iter,T1*3+2)^2+data3(iter,T1*3+3)^2);
                a=data3(iter,T1*3+1)/mag;
                b=data3(iter,T1*3+2)/mag;
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1_TH(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1_TH(iter)=atan2(0,a)-X;
                end
            
                if TH1_TH(iter)>halfpi
                    TH1_TH(iter)=halfpi;
                elseif TH1_TH(iter)<-halfpi
                    TH1_TH(iter)=-halfpi;
                end
            
                Y(iter)=sin(TH1_TH(iter))*alpha+cos(TH1_TH(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2_TH(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2_TH(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2_TH(iter)>halfpi
                    TH2_TH(iter)=halfpi;
                elseif TH2_TH(iter)<-halfpi
                    TH2_TH(iter)=-halfpi;
                end
            
                
                mag=sqrt(data3(iter,T2*3+1)^2+data3(iter,T2*3+2)^2+data3(iter,T2*3+3)^2);
                a=data3(iter,T2*3+1)/mag;
                b=data3(iter,T2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4_TH(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4_TH(iter)=atan2(a,0)-X;
                end
            
                if TH4_TH(iter)>halfpi
                    TH4_TH(iter)=halfpi;
                elseif TH4_TH(iter)<-halfpi
                    TH4_TH(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH4_TH(iter))*alpha+cos(TH4_TH(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3_TH(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3_TH(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3_TH(iter)>halfpi
                    TH3_TH(iter)=halfpi;
                elseif TH3_TH(iter)<-halfpi
                    TH3_TH(iter)=-halfpi;
                end
            
                TH4_TH(iter)=TH4_TH(iter)+pi/4;
            
                TH1_TH(iter)=TH1_TH(iter)-off_TH1_TH;
                TH2_TH(iter)=TH2_TH(iter)-off_TH2_TH;
                TH3_TH(iter)=TH3_TH(iter)-off_TH3_TH;
                TH4_TH(iter)=TH4_TH(iter)-off_TH4_TH;
                
                mag=sqrt(data3(iter,I1*3+1)^2+data3(iter,I1*3+2)^2+data3(iter,I1*3+3)^2);
                a=data3(iter,I1*3+1)/mag;
                b=data3(iter,I1*3+2)/mag;
            
                X=atan2(gamma,alpha);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH1(iter)=atan2(sqrt(alpha*alpha+gamma*gamma-a*a),a)-X;
                else
                    TH1(iter)=atan2(0,a)-X;
                end
            
                if TH1(iter)>halfpi
                    TH1(iter)=halfpi;
                elseif TH1(iter)<-halfpi
                    TH1(iter)=-halfpi;
                end
            
                Y(iter)=-sin(TH1(iter))*alpha+cos(TH1(iter))*gamma;
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH2(iter)=atan2(b,0)-atan2(beta,Y(iter));
                else
                    TH2(iter)=atan2(b,sqrt(Y(iter)*Y(iter)+beta*beta-b*b))-atan2(beta,Y(iter));
                end
            
                if TH2(iter)>halfpi
                    TH2(iter)=halfpi;
                elseif TH2(iter)<-halfpi
                    TH2(iter)=-halfpi;
                end
            
                
                mag=sqrt(data3(iter,I2*3+1)^2+data3(iter,I2*3+2)^2+data3(iter,I2*3+3)^2);
                a=data3(iter,I2*3+1)/mag;
                b=data3(iter,I2*3+2)/mag;
            
                X=atan2(alpha,gamma);
                if alpha*alpha+gamma*gamma-a*a>0
                    TH4(iter)=atan2(a,sqrt(alpha*alpha+gamma*gamma-a*a))-X;
                else
                    TH4(iter)=atan2(a,0)-X;
                end
            
                if TH4(iter)>halfpi
                    TH4(iter)=halfpi;
                elseif TH4(iter)<-halfpi
                    TH4(iter)=-halfpi;
                end
            
            
                Y(iter)=-sin(TH4(iter))*alpha+cos(TH4(iter))*gamma;
                if Y(iter) == 0
                    Y(iter)=0.00001;
                end
                if Y(iter)*Y(iter)+beta*beta-b*b<0
                    TH3(iter)=atan2(0,b)-atan2(Y(iter),beta);
                else
                    TH3(iter)=atan2(sqrt(Y(iter)*Y(iter)+beta*beta-b*b),b)-atan2(Y(iter),beta);
                end
            
                if TH3(iter)>halfpJacobianMati
                    TH3(iter)=halfpi;
                elseif TH3(iter)<-halfpi
                    TH3(iter)=-halfpi;
                end
            
                TH4(iter)=TH4(iter)+pi/4;
            
                TH1(iter)=TH1(iter)-off_TH1;
                TH2(iter)=TH2(iter)-off_TH2;
                TH3(iter)=TH3(iter)-off_TH3;
                TH4(iter)=TH4(iter)-off_TH4;
            
                A1_TH=q_TH_double(1); B1_TH=q_TH_double(2); C1_TH=q_TH_double(3); D1_TH=q_TH_double(4);
                A2_TH=q_TH_double(5); B2_TH=TH1_TH(iter); C2_TH=q_TH_double(6); D2_TH=q_TH_double(7);
                A3_TH=q_TH_double(8); B3_TH=TH2_TH(iter); C3_TH=l2_TH; D3_TH=0;
                A4_TH=0; B4_TH=-halfpi; C4_TH=l3_TH; D4_TH=q_TH_double(9);
                A5_TH=q_TH_double(10); B5_TH=TH3_TH(iter); C5_TH=q_TH_double(11); D5_TH=q_TH_double(12);
                A6_TH=q_TH_double(13); B6_TH=TH4_TH(iter); C6_TH=l5_TH; D6_TH=0;
                A7_TH=q_TH_double(14); B7_TH=q_TH_double(15); C7_TH=q_TH_double(16); D7_TH=q_TH_double(17);
                A8_TH=l7_TH; B8_TH=halfpi; C8_TH=l8_TH; D8_TH=0; A0_TH=q_TH_double(18); B0_TH=q_TH_double(19); C0_TH=q_TH_double(20); D0_TH=q_TH_double(21); E0_TH=q_TH_double(22); F0_TH=q_TH_double(23);
            
                A1=q_double(1); B1=q_double(2); C1=q_double(3); D1=q_double(4);
                A2=q_double(5); B2=TH1(iter); C2=q_double(6); D2=q_double(7);
                A3=q_double(8); B3=TH2(iter); C3=l2; D3=0;
                A4=0; B4=-halfpi; C4=l3; D4=q_double(9);
                A5=q_double(10); B5=TH3(iter); C5=q_double(11); D5=q_double(12);
                A6=q_double(13); B6=TH4(iter); C6=l5; D6=0;
                A7=q_double(14); B7=q_double(15); C7=q_double(16); D7=q_double(17);
                A8=l7; B8=halfpi; C8=l8; D8=0;
            
                Joint7_TH=  subs(Joint7Ref_TH);
                Joint7_TH = vpa(Joint7_TH);
                Joint7= subs(Joint7Ref);
                Joint7 = vpa(Joint7);
                
                for i=1:app.iteration
                    percentage = round(percentage_index * 100 / (app.iteration * 4));
                    status_text = strcat('Calibrating: Index-', int2str(current_it), '-', int2str(i), '(', int2str(percentage), '%)');
                    percentage_index = percentage_index + 1;
                    app.StatusBarEditField.Value = status_text;
                    pause(0.3);
                    error=Joint7_TH-Joint7;
                    
                    JacobianMat=subs(JacobianMatRef);
                    %JacobianMat=double(JacobianMat);
                    
                    % SVD decomposition
                    [u, d, v] = svd(JacobianMat);
                    
                    % the sum of magnitude of vector in the ith column of U
                    N1 = sqrt(u(1,1)^2+u(2, 1)^2+u(3,1)^2);
                    N2 = sqrt(u(1,2)^2+u(2, 2)^2+u(3,2)^2);
                    N3 = sqrt(u(1,3)^2+u(2, 3)^2+u(3,3)^2);
                    
                    % relative magnitude of the change of end effector's position in jth joint angle
                    m1=0;
                    for i=1:1:23
                        m1 = m1 + v(i,1)*sqrt(JacobianMat(1,i)^2 + JacobianMat(2, i)^2 + JacobianMat(3, i)^2);
                    end
                    sum_m1 = m1/d(1,1);
                    
                    m2=0;
                    for i=1:1:23
                        m2 = m2 + v(i,2)*sqrt(JacobianMat(1, i)^2 + JacobianMat(2, i)^2 + JacobianMat(3, i)^2);
                    end
                    sum_m2 = m2/d(2,2);
                    
                    m3=0;
                    for i=1:1:23
                        m3 = m3 + v(i,3)*sqrt(JacobianMat(1, i)^2 + JacobianMat(2, i)^2 + JacobianMat(3, i)^2);
                    end
                    sum_m3 = m3/d(3,3);
                    
                    % gamma for bounds
                    gamma_max = 0.2;
                    gamma1 = min(1, N1/sum_m1)*gamma_max;
                    gamma2 = min(1, N2/sum_m2)*gamma_max;
                    gamma3 = min(1, N3/sum_m3)*gamma_max;
                    
                    %clamp max
                    
                    phi1 = u(:, 1)'*error*v(:, 1)/d(1, 1);
                    
                    if max(phi1) <= gamma1
                       phi1 = phi1;
                    else
                        phi1 = gamma1*phi1/max(phi1);
                    end
                    
                    phi2 = u(:, 2)'*error*v(:, 2)/d(2, 2);
                    if max(phi2) <= gamma2
                        phi2 = phi2;
                    else
                        phi2 = gamma2*phi2/max(phi2);
                    end
                    
                    phi3 = u(:, 3)'*error*v(:, 3)/d(3, 3);
                    if max(phi3) <=gamma3
                        phi3 = phi3;
                    else
                        phi3 = gamma3*phi3/max(phi3);
                    end
                    
                   phi = phi1+ phi2 + phi3;
                   
                   if max(phi) <=gamma_max
                        phi = phi;
                    else
                        phi = gamma_max*phi/max(phi);
                    end
                    
                    dq = phi;
            
%                     dq_=(JacobianMat*JacobianMat'+lambda*eye(3))\error;
%                     dq=JacobianMat'*dq_;
                    q_double=subs(qRef);
                    q_double=vpa(q_double+dq);
            
                    A1=q_double(1); B1=q_double(2); C1=q_double(3); D1=q_double(4);
                    A2=q_double(5); C2=q_double(6); D2=q_double(7);
                    A3=q_double(8); C3=l2; D3=0;
                    A4=0; B4=-halfpi; C4=l3; D4=q_double(9);
                    A5=q_double(10); C5=q_double(11); D5=q_double(12);
                    A6=q_double(13); C6=l5; D6=0;
                    A7=q_double(14); B7=q_double(15); C7=q_double(16); D7=q_double(17);
                    A8=l7; B8=halfpi; C8=l8; D8=0;
                
                    Joint7=subs(Joint7Ref);
                    Joint7=vpa(Joint7);
                end
                current_it = current_it + 1;
            end
            app.DH_off = [subs(q_double) subs(q_TH_double) subs(q_MI_double)];
            app.ReadytoExportLamp.Color = 'green';
            app.StatusBarEditField.Value = 'Calibration has been finished. Ready to export';
            if(app.auto_export)
                app.exportParametersAuto()
            end
        end
        
        function exportParametersAuto(app)
            validation = app.DH_init-double(app.DH_off);
            oldData = get(app.UITable, 'Data');
            test = sum(sum(validation > 0.3));
            idx_bigErrors = find(strcmp(oldData, 'Number of Big Errors'));
            if (isempty(idx_bigErrors))
                    
                newRow = {'Number of Big Errors', test};
                newData = [oldData; newRow];
                app.UITable.Data = newData;
            else
                oldData(idx_bigErrors, 2) = {test};
                app.UITable.Data = oldData;
            end
            current_data = app.DH_off';
            filename = strcat(app.outputFileName, '.json');
            fileID = fopen(filename, 'w');
            if(app.current_mode == 0)
                fprintf(fileID, 'm->LDH_offset << ');
            else
                fprintf(fileID, 'm->DH_offset << ');
            end
            for i = 1 : 3
                for j = 1 : 23
                    if (i == 3)
                        if (j == 23)
                            fprintf(fileID, ' %f;', current_data(i,j));
                            continue
                        end
                    end
                    fprintf(fileID, ' %f,', current_data(i, j));
                end
                fprintf(fileID, '\n');
            end
            fprintf(fileID, '\n');
            if (app.current_mode == 0)
                fprintf(fileID, 'm->Loff_TH2 = %f;\n', app.off_TH2);
                fprintf(fileID, 'm->Loff_TH3 = %f;\n', app.off_TH3);
                fprintf(fileID, 'm->Loff_TH2_MI = %f;\n', app.off_TH2_MI);
                fprintf(fileID, 'm->Loff_TH3_MI = %f;\n', app.off_TH3_MI);
                fprintf(fileID, 'm->Loff_TH2_TH = %f;\n', app.off_TH2_TH);
                fprintf(fileID, 'm->Loff_TH3_TH = %f;\n', app.off_TH3_TH);                     
            else
                fprintf(fileID, 'm->off_TH2 = %f;\n', app.off_TH2);
                fprintf(fileID, 'm->off_TH3 = %f;\n', app.off_TH3);
                fprintf(fileID, 'm->off_TH2_MI = %f;\n', app.off_TH2_MI);
                fprintf(fileID, 'm->off_TH3_MI = %f;\n', app.off_TH3_MI);
                fprintf(fileID, 'm->off_TH2_TH = %f;\n', app.off_TH2_TH);
                fprintf(fileID, 'm->off_TH3_TH = %f;\n', app.off_TH3_TH);
            end
            fclose(fileID);
            app.StatusBarEditField.Value = strcat('Parameters have been exported', int2str(sum(validation > 0.3)));
            
        end
        
    end


    methods (Access = private)

        % Button pushed function: DataPathButton
        function DataPathButtonPushed(app, event)

            [selpath, path] = uigetfile('*.csv');
            app.EditField.Value = strcat(path, selpath);
            app.dataPath = strcat(path, selpath);
        end

        % Button pushed function: LoadOffsetButton
        function LoadOffsetButtonPushed(app, event)
            fid = fopen(app.offsetPath);
            offsetData = textscan(fid, '%f');
            app.off_TH1 = offsetData{1}(1);
            app.off_TH2 = offsetData{1}(2);
            app.off_TH3 = offsetData{1}(3);
            app.off_TH4 = offsetData{1}(4);
            
            app.off_TH1_MI = offsetData{1}(5);
            app.off_TH2_MI = offsetData{1}(6);
            app.off_TH3_MI = offsetData{1}(7);
            app.off_TH4_MI = offsetData{1}(8);
            
            app.off_TH1_TH = offsetData{1}(9);
            app.off_TH2_TH = offsetData{1}(10);
            app.off_TH3_TH = offsetData{1}(11);
            app.off_TH4_TH = offsetData{1}(12);
            
             d = {'off_TH1', app.off_TH1; 'off_TH2', app.off_TH2; ...
                 'off_TH3', app.off_TH3; 'off_TH4', app.off_TH4; ...
                 'off_TH1_MI', app.off_TH1_MI; 'off_TH2_MI', app.off_TH2_MI; ...
                 'off_TH3_MI', app.off_TH3_MI; 'off_TH4_MI', app.off_TH4_MI; ...
                 'off_TH1_TH', app.off_TH1_TH; 'off_TH2_TH', app.off_TH2_TH; ...
                 'off_TH3_TH', app.off_TH3_TH; 'off_TH4_TH', app.off_TH4_TH;} 
             
            app.UITable.Data = d;
            app.StatusBarEditField.Value = 'Offset values have been entered. Ready to Calibrate';
            app.OffsetLoadedLamp.Color = 'green';
            app.ReadytoCalibrateLamp.Color = 'green';
        end

        % Value changed function: Switch
        function SwitchValueChanged(app, event)
            value = app.Switch.Value;
            if (strcmp(value , 'Left'))
                app.current_mode = 0;
            else
                app.current_mode = 1;
            end
        end

        % Button pushed function: LoadDataButton
        function LoadDataButtonPushed(app, event)
            app.data = csvread(app.dataPath);
            app.DataLoadedLamp.Color = 'green';
            app.StatusBarEditField.Value = 'csv file has been loaded. Please enter 6 offset values';
        end

        % Button pushed function: StartCalibrateButton
        function StartCalibrateButtonPushed(app, event)
            if(app.current_mode == 0)
                app.calibrate_mocap_left();
            else
                app.calibrate_mocap_right();
            end
            
        end

        % Button pushed function: ExportParameterButton
        function ExportParameterButtonPushed(app, event)
            
            validation = app.DH_init-double(app.DH_off);
            oldData = get(app.UITable, 'Data');
            test = sum(sum(validation > 0.3));
            idx_bigErrors = find(strcmp(oldData, 'Number of Big Errors'));
            if (isempty(idx_bigErrors))
                    
                newRow = {'Number of Big Errors', test};
                newData = [oldData; newRow];
                app.UITable.Data = newData;
            else
                oldData(idx_bigErrors, 2) = {test};
                app.UITable.Data = oldData;
            end
            current_data = app.DH_off';
            filename = strcat(app.outputFileName, '.json');
            fileID = fopen(filename, 'w');
            if(app.current_mode == 0)
                fprintf(fileID, '{\n');
                fprintf(fileID, '\t"HandSide" : "left",\n\n');
                fprintf(fileID, '\t"DH_offset": [\n ');
            else
                fprintf(fileID, '{\n');
                fprintf(fileID, '\t"HandSide" : "right",\n\n');
                fprintf(fileID, '\t"DH_offset": [\n ');
            end
            for i = 1 : 3
                for j = 1 : 23
                    if (i == 3)
                        if (j == 23)
                            fprintf(fileID, ' %f],', current_data(i,j));
                            continue
                        end
                    end
                    fprintf(fileID, ' %f,', current_data(i, j));
                end
                fprintf(fileID, '\n');
            end
            fprintf(fileID, '\n');
            fprintf(fileID, '\t"off_TH2": %f,\n', app.off_TH2);
            fprintf(fileID, '\t"off_TH3": %f,\n\n', app.off_TH3);
            fprintf(fileID, '\t"off_TH2_MI": %f,\n', app.off_TH2_MI);
            fprintf(fileID, '\t"off_TH3_MI": %f,\n\n', app.off_TH3_MI);
            fprintf(fileID, '\t"off_TH2_TH": %f,\n', app.off_TH2_TH);
            fprintf(fileID, '\t"off_TH3_TH": %f\n', app.off_TH3_TH);
            fprintf(fileID, ' }');
%             if (app.current_mode == 0)
%                 fprintf(fileID, 'm->Loff_TH2 = %f;\n', app.off_TH2);
%                 fprintf(fileID, 'm->Loff_TH3 = %f;\n', app.off_TH3);
%                 fprintf(fileID, 'm->Loff_TH2_MI = %f;\n', app.off_TH2_MI);
%                 fprintf(fileID, 'm->Loff_TH3_MI = %f;\n', app.off_TH3_MI);
%                 fprintf(fileID, 'm->Loff_TH2_TH = %f;\n', app.off_TH2_TH);
%                 fprintf(fileID, 'm->Loff_TH3_TH = %f;\n', app.off_TH3_TH);                     
%             else
%                 fprintf(fileID, 'm->off_TH2 = %f;\n', app.off_TH2);
%                 fprintf(fileID, 'm->off_TH3 = %f;\n', app.off_TH3);
%                 fprintf(fileID, 'm->off_TH2_MI = %f;\n', app.off_TH2_MI);
%                 fprintf(fileID, 'm->off_TH3_MI = %f;\n', app.off_TH3_MI);
%                 fprintf(fileID, 'm->off_TH2_TH = %f;\n', app.off_TH2_TH);
%                 fprintf(fileID, 'm->off_TH3_TH = %f;\n', app.off_TH3_TH);
%             end
            fclose(fileID);
            app.StatusBarEditField.Value = strcat('Parameters have been exported', int2str(sum(validation > 0.3)));
        end

        % Button pushed function: OffsetPathButton
        function OffsetPathButtonPushed(app, event)
            [selpath, path] = uigetfile('*.txt');
            app.EditField_2.Value = strcat(path, selpath);
            app.offsetPath =  strcat(path, selpath);
        end

        % Value changed function: ofiterationEditField
        function ofiterationEditFieldValueChanged(app, event)
            value = app.ofiterationEditField.Value;
            app.iteration = value;
        end

        % Value changed function: LambdaEditField
        function LambdaEditFieldValueChanged(app, event)
            value = app.LambdaEditField.Value;
            app.lambda = value;
        end

        % Value changed function: AutoExportCheckBox
        function AutoExportCheckBoxValueChanged(app, event)
            value = app.AutoExportCheckBox.Value;
            app.auto_export = value;
        end

        % Callback function
        function ExportEveryIterationCheckBoxValueChanged(app, event)
            value = app.ExportEveryIterationCheckBox.Value;
            app.export_every_it = value;
        end

        % Value changed function: OutputFileNameEditField
        function OutputFileNameEditFieldValueChanged(app, event)
            value = app.OutputFileNameEditField.Value;
            app.outputFileName = value;
        end
    end

    % App initialization and construction
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure
            app.UIFigure = uifigure;
            app.UIFigure.Position = [100 100 640 480];
            app.UIFigure.Name = 'UI Figure';

            % Create DataPathButton
            app.DataPathButton = uibutton(app.UIFigure, 'push');
            app.DataPathButton.ButtonPushedFcn = createCallbackFcn(app, @DataPathButtonPushed, true);
            app.DataPathButton.Position = [13 444 118 22];
            app.DataPathButton.Text = 'Data Path';

            % Create EditField
            app.EditField = uieditfield(app.UIFigure, 'text');
            app.EditField.Editable = 'off';
            app.EditField.Position = [151 444 475 22];

            % Create UITable
            app.UITable = uitable(app.UIFigure);
            app.UITable.ColumnName = {'Column 1'; 'Column 2'};
            app.UITable.RowName = {};
            app.UITable.Position = [13 67 302 246];

            % Create LoadDataButton
            app.LoadDataButton = uibutton(app.UIFigure, 'push');
            app.LoadDataButton.ButtonPushedFcn = createCallbackFcn(app, @LoadDataButtonPushed, true);
            app.LoadDataButton.Position = [502 269 118 42];
            app.LoadDataButton.Text = 'Load Data';

            % Create DataLoadedLampLabel
            app.DataLoadedLampLabel = uilabel(app.UIFigure);
            app.DataLoadedLampLabel.HorizontalAlignment = 'right';
            app.DataLoadedLampLabel.Position = [360 279 74 22];
            app.DataLoadedLampLabel.Text = 'Data Loaded';

            % Create DataLoadedLamp
            app.DataLoadedLamp = uilamp(app.UIFigure);
            app.DataLoadedLamp.Position = [449 269 42 42];
            app.DataLoadedLamp.Color = [1 0 0];

            % Create StartCalibrateButton
            app.StartCalibrateButton = uibutton(app.UIFigure, 'push');
            app.StartCalibrateButton.ButtonPushedFcn = createCallbackFcn(app, @StartCalibrateButtonPushed, true);
            app.StartCalibrateButton.Position = [502 155 118 42];
            app.StartCalibrateButton.Text = 'Start Calibrate';

            % Create ReadytoCalibrateLampLabel
            app.ReadytoCalibrateLampLabel = uilabel(app.UIFigure);
            app.ReadytoCalibrateLampLabel.HorizontalAlignment = 'right';
            app.ReadytoCalibrateLampLabel.Position = [329 165 105 22];
            app.ReadytoCalibrateLampLabel.Text = 'Ready to Calibrate';

            % Create ReadytoCalibrateLamp
            app.ReadytoCalibrateLamp = uilamp(app.UIFigure);
            app.ReadytoCalibrateLamp.Position = [449 155 42 42];
            app.ReadytoCalibrateLamp.Color = [1 0 0];

            % Create ExportParameterButton
            app.ExportParameterButton = uibutton(app.UIFigure, 'push');
            app.ExportParameterButton.ButtonPushedFcn = createCallbackFcn(app, @ExportParameterButtonPushed, true);
            app.ExportParameterButton.Position = [502 99 118 42];
            app.ExportParameterButton.Text = 'Export Parameter';

            % Create ReadytoExportLampLabel
            app.ReadytoExportLampLabel = uilabel(app.UIFigure);
            app.ReadytoExportLampLabel.HorizontalAlignment = 'right';
            app.ReadytoExportLampLabel.Position = [342 109 92 22];
            app.ReadytoExportLampLabel.Text = 'Ready to Export';

            % Create ReadytoExportLamp
            app.ReadytoExportLamp = uilamp(app.UIFigure);
            app.ReadytoExportLamp.Position = [449 99 42 42];
            app.ReadytoExportLamp.Color = [1 0 0];

            % Create SwitchLabel
            app.SwitchLabel = uilabel(app.UIFigure);
            app.SwitchLabel.HorizontalAlignment = 'center';
            app.SwitchLabel.Position = [219 341 41 22];
            app.SwitchLabel.Text = 'Switch';

            % Create Switch
            app.Switch = uiswitch(app.UIFigure, 'slider');
            app.Switch.Items = {'Left', 'Right'};
            app.Switch.ValueChangedFcn = createCallbackFcn(app, @SwitchValueChanged, true);
            app.Switch.Position = [216 378 45 20];
            app.Switch.Value = 'Left';

            % Create OffsetLoadedLampLabel
            app.OffsetLoadedLampLabel = uilabel(app.UIFigure);
            app.OffsetLoadedLampLabel.HorizontalAlignment = 'right';
            app.OffsetLoadedLampLabel.Position = [353 222 81 22];
            app.OffsetLoadedLampLabel.Text = 'Offset Loaded';

            % Create OffsetLoadedLamp
            app.OffsetLoadedLamp = uilamp(app.UIFigure);
            app.OffsetLoadedLamp.Position = [449 212 42 42];
            app.OffsetLoadedLamp.Color = [1 0 0];

            % Create LoadOffsetButton
            app.LoadOffsetButton = uibutton(app.UIFigure, 'push');
            app.LoadOffsetButton.ButtonPushedFcn = createCallbackFcn(app, @LoadOffsetButtonPushed, true);
            app.LoadOffsetButton.Position = [502 212 118 42];
            app.LoadOffsetButton.Text = 'Load Offset';

            % Create StatusBarEditFieldLabel
            app.StatusBarEditFieldLabel = uilabel(app.UIFigure);
            app.StatusBarEditFieldLabel.HorizontalAlignment = 'right';
            app.StatusBarEditFieldLabel.Position = [12 24 62 22];
            app.StatusBarEditFieldLabel.Text = 'Status Bar';

            % Create StatusBarEditField
            app.StatusBarEditField = uieditfield(app.UIFigure, 'text');
            app.StatusBarEditField.Position = [89 24 532 22];
            app.StatusBarEditField.Value = 'Please Load Data';

            % Create ofiterationEditFieldLabel
            app.ofiterationEditFieldLabel = uilabel(app.UIFigure);
            app.ofiterationEditFieldLabel.HorizontalAlignment = 'right';
            app.ofiterationEditFieldLabel.Position = [13 376 72 22];
            app.ofiterationEditFieldLabel.Text = '# of iteration';

            % Create ofiterationEditField
            app.ofiterationEditField = uieditfield(app.UIFigure, 'numeric');
            app.ofiterationEditField.ValueChangedFcn = createCallbackFcn(app, @ofiterationEditFieldValueChanged, true);
            app.ofiterationEditField.Position = [100 376 77 22];
            app.ofiterationEditField.Value = 5;

            % Create OffsetPathButton
            app.OffsetPathButton = uibutton(app.UIFigure, 'push');
            app.OffsetPathButton.ButtonPushedFcn = createCallbackFcn(app, @OffsetPathButtonPushed, true);
            app.OffsetPathButton.Position = [13 410 118 22];
            app.OffsetPathButton.Text = 'Offset Path';

            % Create EditField_2
            app.EditField_2 = uieditfield(app.UIFigure, 'text');
            app.EditField_2.Editable = 'off';
            app.EditField_2.Position = [151 410 475 22];

            % Create LambdaEditFieldLabel
            app.LambdaEditFieldLabel = uilabel(app.UIFigure);
            app.LambdaEditFieldLabel.HorizontalAlignment = 'right';
            app.LambdaEditFieldLabel.Position = [36 341 49 22];
            app.LambdaEditFieldLabel.Text = 'Lambda';

            % Create LambdaEditField
            app.LambdaEditField = uieditfield(app.UIFigure, 'numeric');
            app.LambdaEditField.ValueChangedFcn = createCallbackFcn(app, @LambdaEditFieldValueChanged, true);
            app.LambdaEditField.Position = [100 341 77 22];
            app.LambdaEditField.Value = 5000;

            % Create AutoExportCheckBox
            app.AutoExportCheckBox = uicheckbox(app.UIFigure);
            app.AutoExportCheckBox.ValueChangedFcn = createCallbackFcn(app, @AutoExportCheckBoxValueChanged, true);
            app.AutoExportCheckBox.Text = 'Auto Export';
            app.AutoExportCheckBox.Position = [535 376 85 22];

            % Create OutputFileNameEditFieldLabel
            app.OutputFileNameEditFieldLabel = uilabel(app.UIFigure);
            app.OutputFileNameEditFieldLabel.HorizontalAlignment = 'right';
            app.OutputFileNameEditFieldLabel.Position = [271 341 100 22];
            app.OutputFileNameEditFieldLabel.Text = 'Output File Name';

            % Create OutputFileNameEditField
            app.OutputFileNameEditField = uieditfield(app.UIFigure, 'text');
            app.OutputFileNameEditField.ValueChangedFcn = createCallbackFcn(app, @OutputFileNameEditFieldValueChanged, true);
            app.OutputFileNameEditField.Position = [382 341 238 22];
            app.OutputFileNameEditField.Value = 'DH_parameters';
        end
    end

    methods (Access = public)

        % Construct app
        function app = Mocap_Calibration_Process_new_191001

            % Create and configure components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end